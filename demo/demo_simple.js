(()=>{"use strict";var __webpack_modules__={322:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./esm/InteractiveSprite.js\n\n\nclass InteractiveSprite extends three_module/* Sprite */.jyi {\n  constructor(material, ctor) {\n    super();\n    this.model = new ctor({\n      view: this,\n      material: material\n    });\n  }\n}\nclass ClickableSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, ClickableObject_ClickableObject);\n  }\n}\nclass CheckBoxSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, CheckBoxObject);\n  }\n}\nclass RadioButtonSprite extends (/* unused pure expression or super */ null && (InteractiveSprite)) {\n  constructor(material) {\n    super(material, RadioButtonObject);\n  }\n}\n;// CONCATENATED MODULE: ./esm/InteractiveMesh.js\n\n\nclass InteractiveMesh extends three_module/* Mesh */.Kj0 {\n  constructor(parameters, ctor) {\n    super(parameters.geo);\n    this.model = new ctor({\n      view: this,\n      material: parameters.material\n    });\n  }\n}\nclass ClickableMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, ClickableObject_ClickableObject);\n  }\n}\nclass CheckBoxMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, CheckBoxObject);\n  }\n}\nclass RadioButtonMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, RadioButtonObject_RadioButtonObject);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ClickableObject.js\n\n/**\n * クリックに反応するObject\n * これ自体は表示オブジェクトではない。\n */\nclass ClickableObject_ClickableObject {\n  get materialSet() {\n    return this._materialSet;\n  }\n  set materialSet(value) {\n    const isSame = value === this._materialSet;\n    this._materialSet = value;\n    if (!isSame) {\n      this.updateMaterial();\n    }\n  }\n  get isOver() {\n    return this._isOver;\n  }\n  get isPress() {\n    return this._isPress;\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor(parameters) {\n    var _a;\n    this._isPress = false;\n    this._isOver = false;\n    this._enable = true;\n    this.mouseEnabled = true;\n    this.frozen = false;\n    this.state = "normal";\n    this._alpha = 1.0;\n    this.view = parameters.view;\n    (_a = this._materialSet) !== null && _a !== void 0 ? _a : this._materialSet = parameters.material;\n    this.updateMaterial();\n  }\n  onMouseDownHandler(event) {\n    if (!this.checkActivity()) return;\n    this._isPress = true;\n    this.updateState("down");\n    this.view.dispatchEvent(event);\n  }\n  onMouseUpHandler(event) {\n    if (!this.checkActivity()) return;\n    const currentPress = this._isPress;\n    this._isPress = false;\n    const nextState = this._isOver ? "over" : "normal";\n    this.updateState(nextState);\n    this.view.dispatchEvent(event);\n    if (this._isPress != currentPress) {\n      this.onMouseClick();\n      const e = ThreeMouseEventUtil.generate("click", this);\n      this.view.dispatchEvent(e);\n    }\n  }\n  onMouseClick() {}\n  onMouseOverHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n  onMouseOutHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n  onMouseOverOutHandler(event) {\n    if (!this.checkActivity()) return;\n    this._isOver = event.type === "over";\n    this.updateState(this._isOver ? "over" : "normal");\n    this.view.dispatchEvent(event);\n  }\n  set alpha(number) {\n    this._alpha = number;\n    this.updateMaterial();\n  }\n  updateState(state) {\n    this.state = state;\n    this.updateMaterial();\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return this._enable && !this.frozen;\n  }\n  enable() {\n    this.switchEnable(true);\n  }\n  disable() {\n    this.switchEnable(false);\n  }\n  updateMaterial() {\n    var _a, _b;\n    (_a = this._materialSet) === null || _a === void 0 ? void 0 : _a.setOpacity(this._alpha);\n    const stateMat = (_b = this._materialSet) === null || _b === void 0 ? void 0 : _b.getMaterial(this.state, this._enable);\n    if (!stateMat) return;\n    switch (this.view.type) {\n      case "Mesh":\n      case "Sprite":\n        this.view.material = stateMat.material;\n        break;\n      case "Group":\n      default:\n        break;\n    }\n  }\n  switchEnable(bool) {\n    this._enable = bool;\n    this.state = bool ? "normal" : "disable";\n    this.updateMaterial();\n  }\n}\n;// CONCATENATED MODULE: ./esm/ClickableGroup.js\n\n\nclass ClickableGroup extends (/* unused pure expression or super */ null && (Group)) {\n  constructor() {\n    super();\n    this.model = new ClickableObject({\n      view: this\n    });\n  }\n}\n;// CONCATENATED MODULE: ./esm/CheckBoxObject.js\n\nclass CheckBoxObject extends ClickableObject_ClickableObject {\n  constructor() {\n    super(...arguments);\n    this._isSelect = false;\n  }\n  /**\n   * クリックイベント時の処理\n   * "click"イベントはマウスイベント類の必ず最後に発生するので\n   * ここでisSelect状態を一括管理する。\n   */\n  onMouseClick() {\n    this._isSelect = !this._isSelect;\n    const e = ThreeMouseEventUtil.generate("select", this);\n    this.view.dispatchEvent(e);\n    this.updateMaterial();\n  }\n  get selection() {\n    return this._isSelect;\n  }\n  set selection(bool) {\n    this._isSelect = bool;\n    this.updateState("normal");\n  }\n  updateMaterial() {\n    this.materialSet.setOpacity(this._alpha);\n    const stateMat = this.materialSet.getMaterial(this.state, this._enable, this._isSelect);\n    this.view.material = stateMat.material;\n  }\n}\n;// CONCATENATED MODULE: ./esm/RadioButtonObject.js\n\nclass RadioButtonObject_RadioButtonObject extends CheckBoxObject {\n  constructor() {\n    super(...arguments);\n    this._isFrozen = false;\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * ラジオボタンは選択中は自身の状態を変更できない。\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return this._enable && !this._isFrozen;\n  }\n  get isFrozen() {\n    return this._isFrozen;\n  }\n  set isFrozen(bool) {\n    this._isFrozen = bool;\n  }\n}\n;// CONCATENATED MODULE: ./esm/RadioButtonManager.js\n\n\nclass RadioButtonManager extends three_module/* EventDispatcher */.pBf {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    /**\n     * このマネージャーの管理下のボタン\n     * @private\n     */\n    this._models = [];\n    /**\n     * 管理下のボタンが選択された場合の処理\n     * @param {Event} e\n     */\n    this.onSelectedButton = e => {\n      if (e.isSelected) {\n        this.select(e.model);\n      }\n    };\n  }\n  /**\n   * このマネージャーの管理下にボタンを追加する\n   * @param {IClickableObject3D[]} buttons\n   */\n  addButton(...buttons) {\n    buttons.forEach(btn => {\n      this.addModel(btn.model);\n    });\n  }\n  addModel(model) {\n    this._models.push(model);\n    model.view.addEventListener("select", this.onSelectedButton);\n  }\n  /**\n   * ボタンを管理下から外す。\n   * ボタン自体の削除は行わない。\n   * @param {IClickableObject3D} button\n   */\n  removeButton(button) {\n    this.removeModel(button.model);\n  }\n  removeModel(model) {\n    const index = this._models.indexOf(model);\n    if (index > -1) {\n      this._models.splice(index, 1);\n      model.view.removeEventListener("select", this.onSelectedButton);\n    }\n    return model;\n  }\n  /**\n   * 特定のボタンを選択する\n   * @param {RadioButtonObject} model\n   */\n  select(model) {\n    const index = this._models.indexOf(model);\n    if (index === -1) {\n      console.warn("管理下でないボタンが選択処理されました。");\n      return;\n    }\n    //選択済みのボタンを再度渡されても反応しない。\n    if (model === this._selected && model.isFrozen) {\n      return;\n    }\n    this._selected = model;\n    for (let mdl of this._models) {\n      mdl.selection = mdl.isFrozen = mdl === model;\n    }\n    const evt = ThreeMouseEventUtil.generate("select", model);\n    this.dispatchEvent(evt);\n  }\n  get selected() {\n    return this._selected;\n  }\n  get models() {\n    return this._models;\n  }\n}\n;// CONCATENATED MODULE: ./esm/StateMaterial.js\nclass StateMaterial {\n  constructor(material) {\n    this.alpha = 1.0;\n    this.material = material;\n  }\n  updateAlpha() {\n    if (this._material instanceof Array) {\n      this.alphaArray = this.getAlphaArray();\n    } else {\n      this.alpha = this._material.opacity;\n    }\n  }\n  getAlphaArray() {\n    const matArray = this._material;\n    const n = matArray.length;\n    const array = [];\n    for (let i = 0; i < n; i++) {\n      array.push(matArray[i].opacity);\n    }\n    return array;\n  }\n  set material(value) {\n    this._material = value;\n    this.updateAlpha();\n  }\n  get material() {\n    return this._material;\n  }\n  setOpacity(opacity) {\n    if (this._material instanceof Array) {\n      const n = this._material.length;\n      for (let i = 0; i < n; i++) {\n        const material = this._material[i];\n        material.opacity = opacity * this.alphaArray[i];\n      }\n    } else {\n      this._material.opacity = opacity * this.alpha;\n    }\n  }\n}\nclass StateMaterialSet {\n  constructor(param) {\n    this.normal = new StateMaterial(param.normal);\n    this.over = StateMaterialSet.initMaterial(param.over, this.normal);\n    this.down = StateMaterialSet.initMaterial(param.down, this.normal);\n    this.disable = StateMaterialSet.initMaterial(param.disable, this.normal);\n    this.normalSelect = StateMaterialSet.initMaterial(param.normalSelect, this.normal);\n    this.overSelect = StateMaterialSet.initMaterial(param.overSelect, this.normal);\n    this.downSelect = StateMaterialSet.initMaterial(param.downSelect, this.normal);\n    this.init();\n  }\n  static initMaterial(value, defaultMaterial) {\n    if (value == null) return defaultMaterial;\n    return new StateMaterial(value);\n  }\n  init() {\n    if (this.normal == null) {\n      throw new Error("通常状態のマテリアルが指定されていません。");\n    }\n    this.materials = [this.normal, this.normalSelect, this.over, this.overSelect, this.down, this.downSelect, this.disable];\n  }\n  getMaterial(state, mouseEnabled, isSelected = false) {\n    //無効状態はstateよりも優先\n    if (!mouseEnabled) {\n      return this.disable;\n    }\n    switch (state) {\n      case "normal":\n        return isSelected ? this.normalSelect : this.normal;\n      case "down":\n        return isSelected ? this.downSelect : this.down;\n      case "over":\n        return isSelected ? this.overSelect : this.over;\n    }\n    return this.normal;\n  }\n  setOpacity(opacity) {\n    this.materials.forEach(mat => {\n      mat.setOpacity(opacity);\n    });\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/MouseEventManager.js\n\n\n\nclass MouseEventManager {\n  /**\n   *\n   * @param scene\n   * @param camera\n   * @param canvas\n   * @param option\n   */\n  constructor(scene, camera, canvas, option) {\n    var _a, _b, _c;\n    this.raycaster = new three_module/* Raycaster */.iMs();\n    this.mouse = new three_module/* Vector2 */.FM8();\n    this.hasThrottled = false;\n    this.throttlingDelta = 0;\n    this.onTick = e => {\n      this.throttlingDelta += e.delta;\n      if (this.throttlingDelta < this.throttlingTime_ms) {\n        return;\n      }\n      this.hasThrottled = false;\n      this.throttlingDelta %= this.throttlingTime_ms;\n    };\n    this.onDocumentMouseMove = event => {\n      if (this.hasThrottled) return;\n      this.hasThrottled = true;\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n      if (intersects.length === 0) {\n        this.clearOver();\n        return;\n      }\n      const beforeOver = this.currentOver;\n      this.currentOver = [];\n      for (let intersect of intersects) {\n        const checked = this.checkTarget(intersect.object, "over");\n        if (checked) break;\n      }\n      beforeOver === null || beforeOver === void 0 ? void 0 : beforeOver.forEach(btn => {\n        if (!this.currentOver.includes(btn)) {\n          MouseEventManager.onButtonHandler(btn, "out");\n        }\n      });\n    };\n    /**\n     * カンバス上でマウスダウンかマウスアップが行われた際のイベントハンドラー\n     * マウス座標から対象となるObject3Dを探し出して操作を行う。\n     * @param {MouseEvent} event\n     */\n    this.onDocumentMouseUpDown = event => {\n      let eventType = "down";\n      switch (event.type) {\n        case "mousedown":\n          eventType = "down";\n          break;\n        case "mouseup":\n          eventType = "up";\n          break;\n      }\n      if (!ViewPortUtil.isContain(this.canvas, this.viewport, event) && eventType === "down") {\n        return;\n      }\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n      this.checkIntersects(intersects, eventType);\n    };\n    this.camera = camera;\n    this.scene = scene;\n    this.throttlingTime_ms = (_a = option === null || option === void 0 ? void 0 : option.throttlingTime_ms) !== null && _a !== void 0 ? _a : 33;\n    this.viewport = option === null || option === void 0 ? void 0 : option.viewport;\n    this.recursive = (_b = option === null || option === void 0 ? void 0 : option.recursive) !== null && _b !== void 0 ? _b : true;\n    this.targets = (_c = option === null || option === void 0 ? void 0 : option.targets) !== null && _c !== void 0 ? _c : this.scene.children;\n    this.canvas = canvas;\n    canvas.addEventListener("mousemove", this.onDocumentMouseMove, false);\n    canvas.addEventListener("mousedown", this.onDocumentMouseUpDown, false);\n    canvas.addEventListener("mouseup", this.onDocumentMouseUpDown, false);\n    esm/* RAFTicker.on */.F.on("tick", this.onTick);\n  }\n  /**\n   * 現在マウスオーバーしている対象をなしにする。\n   * もし、すでにマウスオーバー対象が存在するなら、マウスアウトハンドラーを呼び出した後にクリアする。\n   */\n  clearOver() {\n    var _a;\n    (_a = this.currentOver) === null || _a === void 0 ? void 0 : _a.forEach(over => {\n      MouseEventManager.onButtonHandler(over, "out");\n    });\n    this.currentOver = null;\n  }\n  /**\n   * マウスの座標にかかっているオブジェクト一覧から、操作対象を検索し\n   * 指定されたタイプのハンドラー関数を実行させる。\n   * 重なり合ったオブジェクトがある場合、最前面から検索を開始する。\n   * 操作対象が見つかった時点で処理は中断され、背面オブジェクトは操作対象にならない。\n   *\n   * @param {Intersection[]} intersects\n   * @param {ThreeMouseEventType} type\n   */\n  checkIntersects(intersects, type) {\n    const n = intersects.length;\n    if (n === 0) return;\n    for (let i = 0; i < n; i++) {\n      const checked = this.checkTarget(intersects[i].object, type);\n      if (checked) {\n        break;\n      }\n    }\n  }\n  /**\n   * ボタンの各種イベントハンドラーメソッドを、typeにしたがって実行する。\n   * @param {IClickableObject3D} btn\n   * @param {ThreeMouseEventType} type\n   */\n  static onButtonHandler(btn, type) {\n    switch (type) {\n      case "down":\n        btn.model.onMouseDownHandler(ThreeMouseEventUtil.generate(type, btn));\n        return;\n      case "up":\n        btn.model.onMouseUpHandler(ThreeMouseEventUtil.generate(type, btn));\n        return;\n      case "over":\n        if (!btn.model.isOver) {\n          btn.model.onMouseOverHandler(ThreeMouseEventUtil.generate(type, btn));\n        }\n        return;\n      case "out":\n        if (btn.model.isOver) {\n          btn.model.onMouseOutHandler(ThreeMouseEventUtil.generate(type, btn));\n        }\n        return;\n    }\n  }\n  /**\n   * IClickableObject3Dインターフェースを実装しているか否かを判定する。\n   * ユーザー定義Type Guard\n   * @param arg\n   * @private\n   */\n  static implementsIClickableObject3D(arg) {\n    return arg !== null && typeof arg === "object" && arg.model !== null && typeof arg.model === "object" && arg.model.mouseEnabled !== null && typeof arg.model.mouseEnabled === "boolean";\n  }\n  /**\n   * 指定されたtargetオブジェクトから親方向に、クリッカブルインターフェースを継承しているオブジェクトを検索する。\n   * オブジェクトを発見した場合はtrueを、発見できない場合はfalseを返す。\n   *\n   * @param target\n   * @param type\n   * @param hasTarget\n   * @protected\n   */\n  checkTarget(target, type, hasTarget = false) {\n    //クリッカブルインターフェースを継承しているなら判定OK\n    if (MouseEventManager.implementsIClickableObject3D(target) && target.model.mouseEnabled === true) {\n      if (type === "over") {\n        this.currentOver.push(target);\n      }\n      MouseEventManager.onButtonHandler(target, type);\n      return this.checkTarget(target.parent, type, true);\n    }\n    //継承していないならその親を探索継続。\n    //ターゲットから上昇して探す。\n    if (target.parent != null && target.parent.type !== "Scene") {\n      return this.checkTarget(target.parent, type, hasTarget);\n    }\n    //親がシーンの場合は探索終了。\n    return hasTarget;\n  }\n  getIntersects(event) {\n    ViewPortUtil.convertToMousePosition(this.canvas, event, this.viewport, this.mouse);\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    return this.raycaster.intersectObjects(this.targets, this.recursive);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ThreeMouseEvent.js\nclass ThreeMouseEventUtil {\n  static generate(type, modelOrView) {\n    const e = {\n      type,\n      model: ThreeMouseEventUtil.getModel(modelOrView)\n    };\n    if (type === "select") {\n      e.isSelected = ThreeMouseEventUtil.getSelection(e.model);\n    }\n    return e;\n  }\n  static getModel(modelOrView) {\n    if ("model" in modelOrView) {\n      return modelOrView.model;\n    }\n    return modelOrView;\n  }\n  /**\n   * SELECTイベントの場合は、対象ボタンの選択状態を取得\n   * @param model\n   */\n  static getSelection(model) {\n    if ("selection" in model) {\n      return !!model["selection"];\n    } else {\n      throw new Error("選択可能なボタン以外を引数にして、SELECTイベントをインスタンス化しました。SELECTイベントはISelectableObject3Dを実装したクラスとともにインスタンス化してください。");\n    }\n  }\n  static clone(e) {\n    return ThreeMouseEventUtil.generate(e.type, e.model);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ViewPortUtil.js\n\n/**\n * ViewPort矩形に関する処理を受け持つユーティリティクラス\n */\nclass ViewPortUtil {\n  /**\n   * canvasの高さを取得する。\n   *\n   * three.jsのWebGLRendererは、devicePixelRatioにあわせてcanvas.heightを変更する。\n   * ブラウザの拡大縮小を行うと、devicePixelRatioが変更されるためcanvas.heightを取得できない。\n   * そのためまずstyleから高さを取得し、styleがない場合はdevicePixelRatioを加味した高さを取得する。\n   *\n   * @param canvas\n   * @private\n   */\n  static getCanvasHeight(canvas) {\n    const style = canvas.style;\n    if (style.width && style.height) {\n      return parseInt(style.height);\n    } else if (window.devicePixelRatio != null) {\n      return canvas.height / window.devicePixelRatio;\n    }\n    return canvas.height;\n  }\n  static getCanvasWidth(canvas) {\n    const style = canvas.style;\n    if (style.width && style.height) {\n      return parseInt(style.width);\n    } else if (window.devicePixelRatio != null) {\n      return canvas.width / window.devicePixelRatio;\n    }\n    return canvas.width;\n  }\n  /**\n   * ViewportをCanvas内のRectangleに変換する\n   * @param canvas\n   * @param viewport\n   */\n  static convertToRectangle(canvas, viewport) {\n    const height = this.getCanvasHeight(canvas);\n    return {\n      x1: viewport.x,\n      x2: viewport.x + viewport.width,\n      y1: height - (viewport.y + viewport.height),\n      y2: height - viewport.y\n    };\n  }\n  /**\n   * マウスポインターが指定されたviewport内に収まっているかを判定する。\n   * @param canvas\n   * @param viewport\n   * @param event\n   */\n  static isContain(canvas, viewport, event) {\n    if (viewport == null) {\n      return true;\n    }\n    const rect = this.convertToRectangle(canvas, viewport);\n    return event.offsetX >= rect.x1 && event.offsetX <= rect.x2 && event.offsetY >= rect.y1 && event.offsetY <= rect.y2;\n  }\n  /**\n   * マウスイベントをWebGL座標系に変換する\n   * @param canvas\n   * @param event\n   * @param viewport\n   * @param mouse オプション 指定された場合、結果をこのVector2に上書きする\n   */\n  static convertToMousePosition(canvas, event, viewport, mouse) {\n    const {\n      x,\n      y\n    } = this.getMousePosition(canvas, event, viewport);\n    if (mouse) {\n      mouse.set(x, y);\n      return mouse;\n    }\n    return new three_module/* Vector2 */.FM8(x, y);\n  }\n  static getMousePosition(canvas, event, viewport) {\n    if (viewport) {\n      return this.getViewportMousePosition(canvas, event, viewport);\n    }\n    return this.getCanvasMousePosition(canvas, event);\n  }\n  static getCanvasMousePosition(canvas, event) {\n    const x = event.offsetX / this.getCanvasWidth(canvas) * 2 - 1;\n    const y = -(event.offsetY / this.getCanvasHeight(canvas)) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n  static getViewportMousePosition(canvas, event, viewport) {\n    const rect = this.convertToRectangle(canvas, viewport);\n    const mouseX = event.offsetX - rect.x1;\n    const mouseY = event.offsetY - rect.y1;\n    const width = rect.x2 - rect.x1;\n    const height = rect.y2 - rect.y1;\n    const x = mouseX / width * 2 - 1;\n    const y = -(mouseY / height) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_simple.js\n\n\nconst W = 1280;\nconst H = 900;\nlet renderer;\nlet scene;\nlet camera;\nconst onDomContentsLoaded = () => {\n  // シーンを作成\n  scene = new three_module/* Scene */.xsS();\n  camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, 400);\n  camera.position.set(0, 0, 100);\n  scene.add(camera);\n  const renderOption = {\n    canvas: document.getElementById("webgl-canvas"),\n    antialias: true\n  };\n  renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.setClearColor(new three_module/* Color */.Ilk(0x000000));\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  //平行光源オブジェクト(light)の設定\n  const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n  scene.add(ambientLight);\n\n  //マウスイベントの取得開始\n  const manager = new MouseEventManager(scene, camera, renderer.domElement);\n  testButton();\n  testCheckbox();\n  testSprite();\n  testSelectableSprite();\n  testRadio();\n  render();\n};\n\n/**\n * Mesh用のマテリアルセットを新規に取得する。\n * @returns {StateMaterialSet}\n */\nconst getMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getMeshMaterial(0.6),\n    over: getMeshMaterial(0.8),\n    down: getMeshMaterial(1.0),\n    normalSelect: getMeshMaterial(0.6, 0xffff00),\n    overSelect: getMeshMaterial(0.8, 0xffff00),\n    downSelect: getMeshMaterial(1.0, 0xffff00)\n  });\n};\nconst getMeshMaterial = (opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* MeshBasicMaterial */.vBJ({\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\n\n/**\n * スプライト用のマテリアルセットを新規に生成する。\n */\nconst getSpriteMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getSpriteMaterial("./btn045_01.png", 1.0),\n    over: getSpriteMaterial("./btn045_02.png", 1.0),\n    down: getSpriteMaterial("./btn045_03.png", 1.0),\n    normalSelect: getSpriteMaterial("./btn045_01.png", 0.5),\n    overSelect: getSpriteMaterial("./btn045_02.png", 0.5),\n    downSelect: getSpriteMaterial("./btn045_03.png", 0.5)\n  });\n};\n\n/**\n * スプライト用マテリアルを生成する\n * @param img マップ画像URL\n * @param opacity 透過度\n * @param color カラー\n * @returns {SpriteMaterial}\n */\nconst getSpriteMaterial = (img, opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* SpriteMaterial */.xeV({\n    map: new three_module/* TextureLoader */.dpR().load(img),\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\nconst testButton = () => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(3, 3, 3);\n  const clickable = new ClickableMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(-10, 20, 0);\n  scene.add(clickable);\n};\nconst testCheckbox = () => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(3, 3, 3);\n  const clickable = new CheckBoxMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(0, 20, 0);\n  scene.add(clickable);\n};\nconst testSprite = () => {\n  const clickable = new ClickableSprite(getSpriteMaterialSet());\n  alignSprite(clickable, 10);\n};\nconst testSelectableSprite = () => {\n  const selectable = new CheckBoxSprite(getSpriteMaterialSet());\n  alignSprite(selectable, 20);\n};\nconst alignSprite = (sprite, x) => {\n  sprite.position.set(x, 20, 0);\n  const scale = 4.0;\n  sprite.scale.set(scale, scale, scale);\n  scene.add(sprite);\n};\nconst testRadio = () => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(3, 3, 3);\n  const initButton = (x, buttonValue) => {\n    const button = new RadioButtonMesh({\n      geo: geometry,\n      material: getMaterialSet()\n    });\n    button.position.set(x, -10, 0);\n    button.model.value = buttonValue;\n    scene.add(button);\n    return button;\n  };\n  const manager = new RadioButtonManager();\n  manager.addButton(initButton(-10, "button01"), initButton(0, Math.PI), initButton(10, {\n    value01: 1,\n    value02: 2\n  }));\n  manager.addButton(initButton(20, undefined));\n  manager.addEventListener("select", e => {\n    console.log(e.model.value);\n  });\n};\nconst render = () => {\n  renderer.render(scene, camera);\n  requestAnimationFrame(render);\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b2JqZWN0Ly4vZXNtL0ludGVyYWN0aXZlU3ByaXRlLmpzP2NkMzciLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9JbnRlcmFjdGl2ZU1lc2guanM/NjFkOCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZXNtL0NsaWNrYWJsZU9iamVjdC5qcz8zYTA2Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vQ2xpY2thYmxlR3JvdXAuanM/ODEzNCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZXNtL0NoZWNrQm94T2JqZWN0LmpzP2U2MzAiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9SYWRpb0J1dHRvbk9iamVjdC5qcz84NWVlIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vUmFkaW9CdXR0b25NYW5hZ2VyLmpzPzM0ZjYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9TdGF0ZU1hdGVyaWFsLmpzPzVlMTIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9Nb3VzZUV2ZW50TWFuYWdlci5qcz9kOGVlIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vVGhyZWVNb3VzZUV2ZW50LmpzPzVkYzAiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9WaWV3UG9ydFV0aWwuanM/N2QxZSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2RlbW9TcmMvZGVtb19zaW1wbGUuanM/Zjk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcHJpdGUgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IENoZWNrQm94T2JqZWN0LCBDbGlja2FibGVPYmplY3QsIFJhZGlvQnV0dG9uT2JqZWN0LCB9IGZyb20gXCIuL1wiO1xuY2xhc3MgSW50ZXJhY3RpdmVTcHJpdGUgZXh0ZW5kcyBTcHJpdGUge1xuICAgIGNvbnN0cnVjdG9yKG1hdGVyaWFsLCBjdG9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXcgY3Rvcih7IHZpZXc6IHRoaXMsIG1hdGVyaWFsOiBtYXRlcmlhbCB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2xpY2thYmxlU3ByaXRlIGV4dGVuZHMgSW50ZXJhY3RpdmVTcHJpdGUge1xuICAgIGNvbnN0cnVjdG9yKG1hdGVyaWFsKSB7XG4gICAgICAgIHN1cGVyKG1hdGVyaWFsLCAoQ2xpY2thYmxlT2JqZWN0KSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoZWNrQm94U3ByaXRlIGV4dGVuZHMgSW50ZXJhY3RpdmVTcHJpdGUge1xuICAgIGNvbnN0cnVjdG9yKG1hdGVyaWFsKSB7XG4gICAgICAgIHN1cGVyKG1hdGVyaWFsLCAoQ2hlY2tCb3hPYmplY3QpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmFkaW9CdXR0b25TcHJpdGUgZXh0ZW5kcyBJbnRlcmFjdGl2ZVNwcml0ZSB7XG4gICAgY29uc3RydWN0b3IobWF0ZXJpYWwpIHtcbiAgICAgICAgc3VwZXIobWF0ZXJpYWwsIChSYWRpb0J1dHRvbk9iamVjdCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE1lc2ggfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IENoZWNrQm94T2JqZWN0LCBDbGlja2FibGVPYmplY3QsIFJhZGlvQnV0dG9uT2JqZWN0LCB9IGZyb20gXCIuL1wiO1xuY2xhc3MgSW50ZXJhY3RpdmVNZXNoIGV4dGVuZHMgTWVzaCB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycywgY3Rvcikge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLmdlbyk7XG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXcgY3Rvcih7IHZpZXc6IHRoaXMsIG1hdGVyaWFsOiBwYXJhbWV0ZXJzLm1hdGVyaWFsIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDbGlja2FibGVNZXNoIGV4dGVuZHMgSW50ZXJhY3RpdmVNZXNoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIChDbGlja2FibGVPYmplY3QpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hNZXNoIGV4dGVuZHMgSW50ZXJhY3RpdmVNZXNoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIChDaGVja0JveE9iamVjdCkpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbk1lc2ggZXh0ZW5kcyBJbnRlcmFjdGl2ZU1lc2gge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgKFJhZGlvQnV0dG9uT2JqZWN0KSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVGhyZWVNb3VzZUV2ZW50VXRpbCwgfSBmcm9tIFwiLi9cIjtcbi8qKlxuICog44Kv44Oq44OD44Kv44Gr5Y+N5b+c44GZ44KLT2JqZWN0XG4gKiDjgZPjgozoh6rkvZPjga/ooajnpLrjgqrjg5bjgrjjgqfjgq/jg4jjgafjga/jgarjgYTjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWNrYWJsZU9iamVjdCB7XG4gICAgZ2V0IG1hdGVyaWFsU2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWxTZXQ7XG4gICAgfVxuICAgIHNldCBtYXRlcmlhbFNldCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBpc1NhbWUgPSB2YWx1ZSA9PT0gdGhpcy5fbWF0ZXJpYWxTZXQ7XG4gICAgICAgIHRoaXMuX21hdGVyaWFsU2V0ID0gdmFsdWU7XG4gICAgICAgIGlmICghaXNTYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzT3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3ZlcjtcbiAgICB9XG4gICAgZ2V0IGlzUHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ByZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5faXNQcmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc092ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tb3VzZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmZyb3plbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJub3JtYWxcIjtcbiAgICAgICAgdGhpcy5fYWxwaGEgPSAxLjA7XG4gICAgICAgIHRoaXMudmlldyA9IHBhcmFtZXRlcnMudmlldztcbiAgICAgICAgKF9hID0gdGhpcy5fbWF0ZXJpYWxTZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0aGlzLl9tYXRlcmlhbFNldCA9IHBhcmFtZXRlcnMubWF0ZXJpYWwpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxuICAgIG9uTW91c2VEb3duSGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBY3Rpdml0eSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1ByZXNzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShcImRvd25cIik7XG4gICAgICAgIHRoaXMudmlldy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgb25Nb3VzZVVwSGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBY3Rpdml0eSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjdXJyZW50UHJlc3MgPSB0aGlzLl9pc1ByZXNzO1xuICAgICAgICB0aGlzLl9pc1ByZXNzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHRoaXMuX2lzT3ZlciA/IFwib3ZlclwiIDogXCJub3JtYWxcIjtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShuZXh0U3RhdGUpO1xuICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9pc1ByZXNzICE9IGN1cnJlbnRQcmVzcykge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlQ2xpY2soKTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKFwiY2xpY2tcIiwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2hFdmVudChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbk1vdXNlQ2xpY2soKSB7IH1cbiAgICBvbk1vdXNlT3ZlckhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbk1vdXNlT3Zlck91dEhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgICBvbk1vdXNlT3V0SGFuZGxlcihldmVudCkge1xuICAgICAgICB0aGlzLm9uTW91c2VPdmVyT3V0SGFuZGxlcihldmVudCk7XG4gICAgfVxuICAgIG9uTW91c2VPdmVyT3V0SGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBY3Rpdml0eSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc092ZXIgPSBldmVudC50eXBlID09PSBcIm92ZXJcIjtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh0aGlzLl9pc092ZXIgPyBcIm92ZXJcIiA6IFwibm9ybWFsXCIpO1xuICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICAgIHNldCBhbHBoYShudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fYWxwaGEgPSBudW1iZXI7XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWwoKTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruODnOOCv+ODs+OBruacieWKueOAgeeEoeWKueeKtuaFi+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4gICAg44Oc44K/44Oz44GM5pyJ5Yq544GL5ZCm44GLXG4gICAgICovXG4gICAgY2hlY2tBY3Rpdml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZSAmJiAhdGhpcy5mcm96ZW47XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hFbmFibGUodHJ1ZSk7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoRW5hYmxlKGZhbHNlKTtcbiAgICB9XG4gICAgdXBkYXRlTWF0ZXJpYWwoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYSA9IHRoaXMuX21hdGVyaWFsU2V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0T3BhY2l0eSh0aGlzLl9hbHBoYSk7XG4gICAgICAgIGNvbnN0IHN0YXRlTWF0ID0gKF9iID0gdGhpcy5fbWF0ZXJpYWxTZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXRNYXRlcmlhbCh0aGlzLnN0YXRlLCB0aGlzLl9lbmFibGUpO1xuICAgICAgICBpZiAoIXN0YXRlTWF0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudmlldy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiTWVzaFwiOlxuICAgICAgICAgICAgY2FzZSBcIlNwcml0ZVwiOlxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5tYXRlcmlhbCA9IHN0YXRlTWF0Lm1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkdyb3VwXCI6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaEVuYWJsZShib29sKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZSA9IGJvb2w7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBib29sID8gXCJub3JtYWxcIiA6IFwiZGlzYWJsZVwiO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR3JvdXAgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IENsaWNrYWJsZU9iamVjdCB9IGZyb20gXCIuL1wiO1xuZXhwb3J0IGNsYXNzIENsaWNrYWJsZUdyb3VwIGV4dGVuZHMgR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IENsaWNrYWJsZU9iamVjdCh7XG4gICAgICAgICAgICB2aWV3OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDbGlja2FibGVPYmplY3QsIFRocmVlTW91c2VFdmVudFV0aWwsIH0gZnJvbSBcIi4vXCI7XG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hPYmplY3QgZXh0ZW5kcyBDbGlja2FibGVPYmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pc1NlbGVjdCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjgq/jgqTjg5njg7Pjg4jmmYLjga7lh6bnkIZcbiAgICAgKiBcImNsaWNrXCLjgqTjg5njg7Pjg4jjga/jg57jgqbjgrnjgqTjg5njg7Pjg4jpoZ7jga7lv4XjgZrmnIDlvozjgavnmbrnlJ/jgZnjgovjga7jgadcbiAgICAgKiDjgZPjgZPjgadpc1NlbGVjdOeKtuaFi+OCkuS4gOaLrOeuoeeQhuOBmeOCi+OAglxuICAgICAqL1xuICAgIG9uTW91c2VDbGljaygpIHtcbiAgICAgICAgdGhpcy5faXNTZWxlY3QgPSAhdGhpcy5faXNTZWxlY3Q7XG4gICAgICAgIGNvbnN0IGUgPSBUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKFwic2VsZWN0XCIsIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2hFdmVudChlKTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXRlcmlhbCgpO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTZWxlY3Q7XG4gICAgfVxuICAgIHNldCBzZWxlY3Rpb24oYm9vbCkge1xuICAgICAgICB0aGlzLl9pc1NlbGVjdCA9IGJvb2w7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoXCJub3JtYWxcIik7XG4gICAgfVxuICAgIHVwZGF0ZU1hdGVyaWFsKCkge1xuICAgICAgICB0aGlzLm1hdGVyaWFsU2V0LnNldE9wYWNpdHkodGhpcy5fYWxwaGEpO1xuICAgICAgICBjb25zdCBzdGF0ZU1hdCA9IHRoaXMubWF0ZXJpYWxTZXQuZ2V0TWF0ZXJpYWwodGhpcy5zdGF0ZSwgdGhpcy5fZW5hYmxlLCB0aGlzLl9pc1NlbGVjdCk7XG4gICAgICAgIHRoaXMudmlldy5tYXRlcmlhbCA9IHN0YXRlTWF0Lm1hdGVyaWFsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENoZWNrQm94T2JqZWN0IH0gZnJvbSBcIi4vXCI7XG5leHBvcnQgY2xhc3MgUmFkaW9CdXR0b25PYmplY3QgZXh0ZW5kcyBDaGVja0JveE9iamVjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2lzRnJvemVuID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruODnOOCv+ODs+OBruacieWKueOAgeeEoeWKueeKtuaFi+OCkuWPluW+l+OBmeOCi1xuICAgICAqIOODqeOCuOOCquODnOOCv+ODs+OBr+mBuOaKnuS4reOBr+iHqui6q+OBrueKtuaFi+OCkuWkieabtOOBp+OBjeOBquOBhOOAglxuICAgICAqIEByZXR1cm4gICAg44Oc44K/44Oz44GM5pyJ5Yq544GL5ZCm44GLXG4gICAgICovXG4gICAgY2hlY2tBY3Rpdml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZSAmJiAhdGhpcy5faXNGcm96ZW47XG4gICAgfVxuICAgIGdldCBpc0Zyb3plbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRnJvemVuO1xuICAgIH1cbiAgICBzZXQgaXNGcm96ZW4oYm9vbCkge1xuICAgICAgICB0aGlzLl9pc0Zyb3plbiA9IGJvb2w7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBUaHJlZU1vdXNlRXZlbnRVdGlsLCB9IGZyb20gXCIuL1wiO1xuZXhwb3J0IGNsYXNzIFJhZGlvQnV0dG9uTWFuYWdlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgZPjga7jg57jg43jg7zjgrjjg6Pjg7zjga7nrqHnkIbkuIvjga7jg5zjgr/jg7NcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21vZGVscyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICog566h55CG5LiL44Gu44Oc44K/44Oz44GM6YG45oqe44GV44KM44Gf5aC05ZCI44Gu5Yem55CGXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25TZWxlY3RlZEJ1dHRvbiA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5pc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoZS5tb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOBk+OBruODnuODjeODvOOCuOODo+ODvOOBrueuoeeQhuS4i+OBq+ODnOOCv+ODs+OCkui/veWKoOOBmeOCi1xuICAgICAqIEBwYXJhbSB7SUNsaWNrYWJsZU9iamVjdDNEW119IGJ1dHRvbnNcbiAgICAgKi9cbiAgICBhZGRCdXR0b24oLi4uYnV0dG9ucykge1xuICAgICAgICBidXR0b25zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRNb2RlbChidG4ubW9kZWwpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkTW9kZWwobW9kZWwpIHtcbiAgICAgICAgdGhpcy5fbW9kZWxzLnB1c2gobW9kZWwpO1xuICAgICAgICBtb2RlbC52aWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RcIiwgdGhpcy5vblNlbGVjdGVkQnV0dG9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44KS566h55CG5LiL44GL44KJ5aSW44GZ44CCXG4gICAgICog44Oc44K/44Oz6Ieq5L2T44Gu5YmK6Zmk44Gv6KGM44KP44Gq44GE44CCXG4gICAgICogQHBhcmFtIHtJQ2xpY2thYmxlT2JqZWN0M0R9IGJ1dHRvblxuICAgICAqL1xuICAgIHJlbW92ZUJ1dHRvbihidXR0b24pIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNb2RlbChidXR0b24ubW9kZWwpO1xuICAgIH1cbiAgICByZW1vdmVNb2RlbChtb2RlbCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX21vZGVscy5pbmRleE9mKG1vZGVsKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX21vZGVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgbW9kZWwudmlldy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsIHRoaXMub25TZWxlY3RlZEJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDnibnlrprjga7jg5zjgr/jg7PjgpLpgbjmip7jgZnjgotcbiAgICAgKiBAcGFyYW0ge1JhZGlvQnV0dG9uT2JqZWN0fSBtb2RlbFxuICAgICAqL1xuICAgIHNlbGVjdChtb2RlbCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX21vZGVscy5pbmRleE9mKG1vZGVsKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi566h55CG5LiL44Gn44Gq44GE44Oc44K/44Oz44GM6YG45oqe5Yem55CG44GV44KM44G+44GX44Gf44CCXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8v6YG45oqe5riI44G/44Gu44Oc44K/44Oz44KS5YaN5bqm5rih44GV44KM44Gm44KC5Y+N5b+c44GX44Gq44GE44CCXG4gICAgICAgIGlmIChtb2RlbCA9PT0gdGhpcy5fc2VsZWN0ZWQgJiYgbW9kZWwuaXNGcm96ZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IG1vZGVsO1xuICAgICAgICBmb3IgKGxldCBtZGwgb2YgdGhpcy5fbW9kZWxzKSB7XG4gICAgICAgICAgICBtZGwuc2VsZWN0aW9uID0gbWRsLmlzRnJvemVuID0gbWRsID09PSBtb2RlbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBldnQgPSBUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKFwic2VsZWN0XCIsIG1vZGVsKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGdldCBzZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICAgIH1cbiAgICBnZXQgbW9kZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxzO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBTdGF0ZU1hdGVyaWFsIHtcbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLmFscGhhID0gMS4wO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgfVxuICAgIHVwZGF0ZUFscGhhKCkge1xuICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdGhpcy5hbHBoYUFycmF5ID0gdGhpcy5nZXRBbHBoYUFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFscGhhID0gdGhpcy5fbWF0ZXJpYWwub3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRBbHBoYUFycmF5KCkge1xuICAgICAgICBjb25zdCBtYXRBcnJheSA9IHRoaXMuX21hdGVyaWFsO1xuICAgICAgICBjb25zdCBuID0gbWF0QXJyYXkubGVuZ3RoO1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgYXJyYXkucHVzaChtYXRBcnJheVtpXS5vcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHNldCBtYXRlcmlhbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnVwZGF0ZUFscGhhKCk7XG4gICAgfVxuICAgIGdldCBtYXRlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFsO1xuICAgIH1cbiAgICBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9tYXRlcmlhbC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5fbWF0ZXJpYWxbaV07XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IG9wYWNpdHkgKiB0aGlzLmFscGhhQXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eSAqIHRoaXMuYWxwaGE7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RhdGVNYXRlcmlhbFNldCB7XG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcbiAgICAgICAgdGhpcy5ub3JtYWwgPSBuZXcgU3RhdGVNYXRlcmlhbChwYXJhbS5ub3JtYWwpO1xuICAgICAgICB0aGlzLm92ZXIgPSBTdGF0ZU1hdGVyaWFsU2V0LmluaXRNYXRlcmlhbChwYXJhbS5vdmVyLCB0aGlzLm5vcm1hbCk7XG4gICAgICAgIHRoaXMuZG93biA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLmRvd24sIHRoaXMubm9ybWFsKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlID0gU3RhdGVNYXRlcmlhbFNldC5pbml0TWF0ZXJpYWwocGFyYW0uZGlzYWJsZSwgdGhpcy5ub3JtYWwpO1xuICAgICAgICB0aGlzLm5vcm1hbFNlbGVjdCA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLm5vcm1hbFNlbGVjdCwgdGhpcy5ub3JtYWwpO1xuICAgICAgICB0aGlzLm92ZXJTZWxlY3QgPSBTdGF0ZU1hdGVyaWFsU2V0LmluaXRNYXRlcmlhbChwYXJhbS5vdmVyU2VsZWN0LCB0aGlzLm5vcm1hbCk7XG4gICAgICAgIHRoaXMuZG93blNlbGVjdCA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLmRvd25TZWxlY3QsIHRoaXMubm9ybWFsKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbml0TWF0ZXJpYWwodmFsdWUsIGRlZmF1bHRNYXRlcmlhbCkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0TWF0ZXJpYWw7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdGVNYXRlcmlhbCh2YWx1ZSk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vcm1hbCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLpgJrluLjnirbmhYvjga7jg57jg4bjg6rjgqLjg6vjgYzmjIflrprjgZXjgozjgabjgYTjgb7jgZvjgpPjgIJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBbXG4gICAgICAgICAgICB0aGlzLm5vcm1hbCxcbiAgICAgICAgICAgIHRoaXMubm9ybWFsU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5vdmVyLFxuICAgICAgICAgICAgdGhpcy5vdmVyU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5kb3duLFxuICAgICAgICAgICAgdGhpcy5kb3duU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXRNYXRlcmlhbChzdGF0ZSwgbW91c2VFbmFibGVkLCBpc1NlbGVjdGVkID0gZmFsc2UpIHtcbiAgICAgICAgLy/nhKHlirnnirbmhYvjga9zdGF0ZeOCiOOCiuOCguWEquWFiFxuICAgICAgICBpZiAoIW1vdXNlRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwibm9ybWFsXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyB0aGlzLm5vcm1hbFNlbGVjdCA6IHRoaXMubm9ybWFsO1xuICAgICAgICAgICAgY2FzZSBcImRvd25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTZWxlY3RlZCA/IHRoaXMuZG93blNlbGVjdCA6IHRoaXMuZG93bjtcbiAgICAgICAgICAgIGNhc2UgXCJvdmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyB0aGlzLm92ZXJTZWxlY3QgOiB0aGlzLm92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICAgIH1cbiAgICBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMuZm9yRWFjaCgobWF0KSA9PiB7XG4gICAgICAgICAgICBtYXQuc2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUkFGVGlja2VyIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IHsgUmF5Y2FzdGVyLCBWZWN0b3IyLCB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgVGhyZWVNb3VzZUV2ZW50VXRpbCwgVmlld1BvcnRVdGlsLCB9IGZyb20gXCIuL1wiO1xuZXhwb3J0IGNsYXNzIE1vdXNlRXZlbnRNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjYW1lcmFcbiAgICAgKiBAcGFyYW0gY2FudmFzXG4gICAgICogQHBhcmFtIG9wdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCBjYW1lcmEsIGNhbnZhcywgb3B0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB0aGlzLnJheWNhc3RlciA9IG5ldyBSYXljYXN0ZXIoKTtcbiAgICAgICAgdGhpcy5tb3VzZSA9IG5ldyBWZWN0b3IyKCk7XG4gICAgICAgIHRoaXMuaGFzVGhyb3R0bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGhyb3R0bGluZ0RlbHRhID0gMDtcbiAgICAgICAgdGhpcy5vblRpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsaW5nRGVsdGEgKz0gZS5kZWx0YTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRocm90dGxpbmdEZWx0YSA8IHRoaXMudGhyb3R0bGluZ1RpbWVfbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhhc1Rocm90dGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsaW5nRGVsdGEgJT0gdGhpcy50aHJvdHRsaW5nVGltZV9tcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNUaHJvdHRsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5oYXNUaHJvdHRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLmdldEludGVyc2VjdHMoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhck92ZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiZWZvcmVPdmVyID0gdGhpcy5jdXJyZW50T3ZlcjtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE92ZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGludGVyc2VjdCBvZiBpbnRlcnNlY3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHRoaXMuY2hlY2tUYXJnZXQoaW50ZXJzZWN0Lm9iamVjdCwgXCJvdmVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJlZm9yZU92ZXIgPT09IG51bGwgfHwgYmVmb3JlT3ZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmVmb3JlT3Zlci5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY3VycmVudE92ZXIuaW5jbHVkZXMoYnRuKSkge1xuICAgICAgICAgICAgICAgICAgICBNb3VzZUV2ZW50TWFuYWdlci5vbkJ1dHRvbkhhbmRsZXIoYnRuLCBcIm91dFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCq+ODs+ODkOOCueS4iuOBp+ODnuOCpuOCueODgOOCpuODs+OBi+ODnuOCpuOCueOCouODg+ODl+OBjOihjOOCj+OCjOOBn+mam+OBruOCpOODmeODs+ODiOODj+ODs+ODieODqeODvFxuICAgICAgICAgKiDjg57jgqbjgrnluqfmqJnjgYvjgonlr77osaHjgajjgarjgotPYmplY3QzROOCkuaOouOBl+WHuuOBl+OBpuaTjeS9nOOCkuihjOOBhuOAglxuICAgICAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRG9jdW1lbnRNb3VzZVVwRG93biA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50VHlwZSA9IFwiZG93blwiO1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBcImRvd25cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gXCJ1cFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghVmlld1BvcnRVdGlsLmlzQ29udGFpbih0aGlzLmNhbnZhcywgdGhpcy52aWV3cG9ydCwgZXZlbnQpICYmXG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlID09PSBcImRvd25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5nZXRJbnRlcnNlY3RzKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJbnRlcnNlY3RzKGludGVyc2VjdHMsIGV2ZW50VHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMudGhyb3R0bGluZ1RpbWVfbXMgPSAoX2EgPSBvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb24udGhyb3R0bGluZ1RpbWVfbXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDMzO1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gb3B0aW9uID09PSBudWxsIHx8IG9wdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9uLnZpZXdwb3J0O1xuICAgICAgICB0aGlzLnJlY3Vyc2l2ZSA9IChfYiA9IG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi5yZWN1cnNpdmUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IChfYyA9IG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi50YXJnZXRzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0aGlzLnNjZW5lLmNoaWxkcmVuO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMub25Eb2N1bWVudE1vdXNlVXBEb3duLCBmYWxzZSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uRG9jdW1lbnRNb3VzZVVwRG93biwgZmFsc2UpO1xuICAgICAgICBSQUZUaWNrZXIub24oXCJ0aWNrXCIsIHRoaXMub25UaWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54++5Zyo44Oe44Km44K544Kq44O844OQ44O844GX44Gm44GE44KL5a++6LGh44KS44Gq44GX44Gr44GZ44KL44CCXG4gICAgICog44KC44GX44CB44GZ44Gn44Gr44Oe44Km44K544Kq44O844OQ44O85a++6LGh44GM5a2Y5Zyo44GZ44KL44Gq44KJ44CB44Oe44Km44K544Ki44Km44OI44OP44Oz44OJ44Op44O844KS5ZG844Gz5Ye644GX44Gf5b6M44Gr44Kv44Oq44Ki44GZ44KL44CCXG4gICAgICovXG4gICAgY2xlYXJPdmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuY3VycmVudE92ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKChvdmVyKSA9PiB7XG4gICAgICAgICAgICBNb3VzZUV2ZW50TWFuYWdlci5vbkJ1dHRvbkhhbmRsZXIob3ZlciwgXCJvdXRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmN1cnJlbnRPdmVyID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oe44Km44K544Gu5bqn5qiZ44Gr44GL44GL44Gj44Gm44GE44KL44Kq44OW44K444Kn44Kv44OI5LiA6Kan44GL44KJ44CB5pON5L2c5a++6LGh44KS5qSc57Si44GXXG4gICAgICog5oyH5a6a44GV44KM44Gf44K/44Kk44OX44Gu44OP44Oz44OJ44Op44O86Zai5pWw44KS5a6f6KGM44GV44Gb44KL44CCXG4gICAgICog6YeN44Gq44KK5ZCI44Gj44Gf44Kq44OW44K444Kn44Kv44OI44GM44GC44KL5aC05ZCI44CB5pyA5YmN6Z2i44GL44KJ5qSc57Si44KS6ZaL5aeL44GZ44KL44CCXG4gICAgICog5pON5L2c5a++6LGh44GM6KaL44Gk44GL44Gj44Gf5pmC54K544Gn5Yem55CG44Gv5Lit5pat44GV44KM44CB6IOM6Z2i44Kq44OW44K444Kn44Kv44OI44Gv5pON5L2c5a++6LGh44Gr44Gq44KJ44Gq44GE44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0ludGVyc2VjdGlvbltdfSBpbnRlcnNlY3RzXG4gICAgICogQHBhcmFtIHtUaHJlZU1vdXNlRXZlbnRUeXBlfSB0eXBlXG4gICAgICovXG4gICAgY2hlY2tJbnRlcnNlY3RzKGludGVyc2VjdHMsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgbiA9IGludGVyc2VjdHMubGVuZ3RoO1xuICAgICAgICBpZiAobiA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSB0aGlzLmNoZWNrVGFyZ2V0KGludGVyc2VjdHNbaV0ub2JqZWN0LCB0eXBlKTtcbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44Gu5ZCE56iu44Kk44OZ44Oz44OI44OP44Oz44OJ44Op44O844Oh44K944OD44OJ44KS44CBdHlwZeOBq+OBl+OBn+OBjOOBo+OBpuWun+ihjOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSB7SUNsaWNrYWJsZU9iamVjdDNEfSBidG5cbiAgICAgKiBAcGFyYW0ge1RocmVlTW91c2VFdmVudFR5cGV9IHR5cGVcbiAgICAgKi9cbiAgICBzdGF0aWMgb25CdXR0b25IYW5kbGVyKGJ0biwgdHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgICAgICAgICAgYnRuLm1vZGVsLm9uTW91c2VEb3duSGFuZGxlcihUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKHR5cGUsIGJ0bikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJ1cFwiOlxuICAgICAgICAgICAgICAgIGJ0bi5tb2RlbC5vbk1vdXNlVXBIYW5kbGVyKFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUodHlwZSwgYnRuKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcIm92ZXJcIjpcbiAgICAgICAgICAgICAgICBpZiAoIWJ0bi5tb2RlbC5pc092ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnRuLm1vZGVsLm9uTW91c2VPdmVySGFuZGxlcihUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKHR5cGUsIGJ0bikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwib3V0XCI6XG4gICAgICAgICAgICAgICAgaWYgKGJ0bi5tb2RlbC5pc092ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnRuLm1vZGVsLm9uTW91c2VPdXRIYW5kbGVyKFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUodHlwZSwgYnRuKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJQ2xpY2thYmxlT2JqZWN0M0TjgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrnjgpLlrp/oo4XjgZfjgabjgYTjgovjgYvlkKbjgYvjgpLliKTlrprjgZnjgovjgIJcbiAgICAgKiDjg6bjg7zjgrbjg7zlrprnvqlUeXBlIEd1YXJkXG4gICAgICogQHBhcmFtIGFyZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3RhdGljIGltcGxlbWVudHNJQ2xpY2thYmxlT2JqZWN0M0QoYXJnKSB7XG4gICAgICAgIHJldHVybiAoYXJnICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBhcmcubW9kZWwgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBhcmcubW9kZWwgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGFyZy5tb2RlbC5tb3VzZUVuYWJsZWQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBhcmcubW9kZWwubW91c2VFbmFibGVkID09PSBcImJvb2xlYW5cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaMh+WumuOBleOCjOOBn3RhcmdldOOCquODluOCuOOCp+OCr+ODiOOBi+OCieimquaWueWQkeOBq+OAgeOCr+ODquODg+OCq+ODluODq+OCpOODs+OCv+ODvOODleOCp+ODvOOCueOCkue2meaJv+OBl+OBpuOBhOOCi+OCquODluOCuOOCp+OCr+ODiOOCkuaknOe0ouOBmeOCi+OAglxuICAgICAqIOOCquODluOCuOOCp+OCr+ODiOOCkueZuuimi+OBl+OBn+WgtOWQiOOBr3RydWXjgpLjgIHnmbropovjgafjgY3jgarjgYTloLTlkIjjga9mYWxzZeOCkui/lOOBmeOAglxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICogQHBhcmFtIGhhc1RhcmdldFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjaGVja1RhcmdldCh0YXJnZXQsIHR5cGUsIGhhc1RhcmdldCA9IGZhbHNlKSB7XG4gICAgICAgIC8v44Kv44Oq44OD44Kr44OW44Or44Kk44Oz44K/44O844OV44Kn44O844K544KS57aZ5om/44GX44Gm44GE44KL44Gq44KJ5Yik5a6aT0tcbiAgICAgICAgaWYgKE1vdXNlRXZlbnRNYW5hZ2VyLmltcGxlbWVudHNJQ2xpY2thYmxlT2JqZWN0M0QodGFyZ2V0KSAmJlxuICAgICAgICAgICAgdGFyZ2V0Lm1vZGVsLm1vdXNlRW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwib3ZlclwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3Zlci5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNb3VzZUV2ZW50TWFuYWdlci5vbkJ1dHRvbkhhbmRsZXIodGFyZ2V0LCB0eXBlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVGFyZ2V0KHRhcmdldC5wYXJlbnQsIHR5cGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8v57aZ5om/44GX44Gm44GE44Gq44GE44Gq44KJ44Gd44Gu6Kaq44KS5o6i57Si57aZ57aa44CCXG4gICAgICAgIC8v44K/44O844Ky44OD44OI44GL44KJ5LiK5piH44GX44Gm5o6i44GZ44CCXG4gICAgICAgIGlmICh0YXJnZXQucGFyZW50ICE9IG51bGwgJiYgdGFyZ2V0LnBhcmVudC50eXBlICE9PSBcIlNjZW5lXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVGFyZ2V0KHRhcmdldC5wYXJlbnQsIHR5cGUsIGhhc1RhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgLy/opqrjgYzjgrfjg7zjg7Pjga7loLTlkIjjga/mjqLntKLntYLkuobjgIJcbiAgICAgICAgcmV0dXJuIGhhc1RhcmdldDtcbiAgICB9XG4gICAgZ2V0SW50ZXJzZWN0cyhldmVudCkge1xuICAgICAgICBWaWV3UG9ydFV0aWwuY29udmVydFRvTW91c2VQb3NpdGlvbih0aGlzLmNhbnZhcywgZXZlbnQsIHRoaXMudmlld3BvcnQsIHRoaXMubW91c2UpO1xuICAgICAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMubW91c2UsIHRoaXMuY2FtZXJhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHModGhpcy50YXJnZXRzLCB0aGlzLnJlY3Vyc2l2ZSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFRocmVlTW91c2VFdmVudFV0aWwge1xuICAgIHN0YXRpYyBnZW5lcmF0ZSh0eXBlLCBtb2RlbE9yVmlldykge1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG1vZGVsOiBUaHJlZU1vdXNlRXZlbnRVdGlsLmdldE1vZGVsKG1vZGVsT3JWaWV3KSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgICAgIGUuaXNTZWxlY3RlZCA9IFRocmVlTW91c2VFdmVudFV0aWwuZ2V0U2VsZWN0aW9uKGUubW9kZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0TW9kZWwobW9kZWxPclZpZXcpIHtcbiAgICAgICAgaWYgKFwibW9kZWxcIiBpbiBtb2RlbE9yVmlldykge1xuICAgICAgICAgICAgcmV0dXJuIG1vZGVsT3JWaWV3Lm1vZGVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbE9yVmlldztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU0VMRUNU44Kk44OZ44Oz44OI44Gu5aC05ZCI44Gv44CB5a++6LGh44Oc44K/44Oz44Gu6YG45oqe54q25oWL44KS5Y+W5b6XXG4gICAgICogQHBhcmFtIG1vZGVsXG4gICAgICovXG4gICAgc3RhdGljIGdldFNlbGVjdGlvbihtb2RlbCkge1xuICAgICAgICBpZiAoXCJzZWxlY3Rpb25cIiBpbiBtb2RlbCkge1xuICAgICAgICAgICAgcmV0dXJuICEhbW9kZWxbXCJzZWxlY3Rpb25cIl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLpgbjmip7lj6/og73jgarjg5zjgr/jg7Pku6XlpJbjgpLlvJXmlbDjgavjgZfjgabjgIFTRUxFQ1TjgqTjg5njg7Pjg4jjgpLjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZfjgb7jgZfjgZ/jgIJTRUxFQ1TjgqTjg5njg7Pjg4jjga9JU2VsZWN0YWJsZU9iamVjdDNE44KS5a6f6KOF44GX44Gf44Kv44Op44K544Go44Go44KC44Gr44Kk44Oz44K544K/44Oz44K55YyW44GX44Gm44GP44Gg44GV44GE44CCXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjbG9uZShlKSB7XG4gICAgICAgIHJldHVybiBUaHJlZU1vdXNlRXZlbnRVdGlsLmdlbmVyYXRlKGUudHlwZSwgZS5tb2RlbCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiBWaWV3UG9ydOefqeW9ouOBq+mWouOBmeOCi+WHpueQhuOCkuWPl+OBkeaMgeOBpOODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgVmlld1BvcnRVdGlsIHtcbiAgICAvKipcbiAgICAgKiBjYW52YXPjga7pq5jjgZXjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIHRocmVlLmpz44GuV2ViR0xSZW5kZXJlcuOBr+OAgWRldmljZVBpeGVsUmF0aW/jgavjgYLjgo/jgZvjgaZjYW52YXMuaGVpZ2h044KS5aSJ5pu044GZ44KL44CCXG4gICAgICog44OW44Op44Km44K244Gu5ouh5aSn57iu5bCP44KS6KGM44GG44Go44CBZGV2aWNlUGl4ZWxSYXRpb+OBjOWkieabtOOBleOCjOOCi+OBn+OCgWNhbnZhcy5oZWlnaHTjgpLlj5blvpfjgafjgY3jgarjgYTjgIJcbiAgICAgKiDjgZ3jga7jgZ/jgoHjgb7jgZpzdHlsZeOBi+OCiemrmOOBleOCkuWPluW+l+OBl+OAgXN0eWxl44GM44Gq44GE5aC05ZCI44GvZGV2aWNlUGl4ZWxSYXRpb+OCkuWKoOWRs+OBl+OBn+mrmOOBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3RhdGljIGdldENhbnZhc0hlaWdodChjYW52YXMpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgICAgIGlmIChzdHlsZS53aWR0aCAmJiBzdHlsZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzdHlsZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW52YXMuaGVpZ2h0IC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbnZhcy5oZWlnaHQ7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDYW52YXNXaWR0aChjYW52YXMpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgICAgIGlmIChzdHlsZS53aWR0aCAmJiBzdHlsZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzdHlsZS53aWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy53aWR0aCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYW52YXMud2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZpZXdwb3J044KSQ2FudmFz5YaF44GuUmVjdGFuZ2xl44Gr5aSJ5o+b44GZ44KLXG4gICAgICogQHBhcmFtIGNhbnZhc1xuICAgICAqIEBwYXJhbSB2aWV3cG9ydFxuICAgICAqL1xuICAgIHN0YXRpYyBjb252ZXJ0VG9SZWN0YW5nbGUoY2FudmFzLCB2aWV3cG9ydCkge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmdldENhbnZhc0hlaWdodChjYW52YXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDE6IHZpZXdwb3J0LngsXG4gICAgICAgICAgICB4Mjogdmlld3BvcnQueCArIHZpZXdwb3J0LndpZHRoLFxuICAgICAgICAgICAgeTE6IGhlaWdodCAtICh2aWV3cG9ydC55ICsgdmlld3BvcnQuaGVpZ2h0KSxcbiAgICAgICAgICAgIHkyOiBoZWlnaHQgLSB2aWV3cG9ydC55LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg57jgqbjgrnjg53jgqTjg7Pjgr/jg7zjgYzmjIflrprjgZXjgozjgZ92aWV3cG9ydOWGheOBq+WPjuOBvuOBo+OBpuOBhOOCi+OBi+OCkuWIpOWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBjYW52YXNcbiAgICAgKiBAcGFyYW0gdmlld3BvcnRcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNDb250YWluKGNhbnZhcywgdmlld3BvcnQsIGV2ZW50KSB7XG4gICAgICAgIGlmICh2aWV3cG9ydCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5jb252ZXJ0VG9SZWN0YW5nbGUoY2FudmFzLCB2aWV3cG9ydCk7XG4gICAgICAgIHJldHVybiAoZXZlbnQub2Zmc2V0WCA+PSByZWN0LngxICYmXG4gICAgICAgICAgICBldmVudC5vZmZzZXRYIDw9IHJlY3QueDIgJiZcbiAgICAgICAgICAgIGV2ZW50Lm9mZnNldFkgPj0gcmVjdC55MSAmJlxuICAgICAgICAgICAgZXZlbnQub2Zmc2V0WSA8PSByZWN0LnkyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oe44Km44K544Kk44OZ44Oz44OI44KSV2ViR0zluqfmqJnns7vjgavlpInmj5vjgZnjgotcbiAgICAgKiBAcGFyYW0gY2FudmFzXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIG1vdXNlIOOCquODl+OCt+ODp+ODsyDmjIflrprjgZXjgozjgZ/loLTlkIjjgIHntZDmnpzjgpLjgZPjga5WZWN0b3Iy44Gr5LiK5pu444GN44GZ44KLXG4gICAgICovXG4gICAgc3RhdGljIGNvbnZlcnRUb01vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCwgdmlld3BvcnQsIG1vdXNlKSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5nZXRNb3VzZVBvc2l0aW9uKGNhbnZhcywgZXZlbnQsIHZpZXdwb3J0KTtcbiAgICAgICAgaWYgKG1vdXNlKSB7XG4gICAgICAgICAgICBtb3VzZS5zZXQoeCwgeSk7XG4gICAgICAgICAgICByZXR1cm4gbW91c2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHgsIHkpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0TW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50LCB2aWV3cG9ydCkge1xuICAgICAgICBpZiAodmlld3BvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZpZXdwb3J0TW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50LCB2aWV3cG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzTW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50KTtcbiAgICB9XG4gICAgc3RhdGljIGdldENhbnZhc01vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCkge1xuICAgICAgICBjb25zdCB4ID0gKGV2ZW50Lm9mZnNldFggLyB0aGlzLmdldENhbnZhc1dpZHRoKGNhbnZhcykpICogMiAtIDE7XG4gICAgICAgIGNvbnN0IHkgPSAtKGV2ZW50Lm9mZnNldFkgLyB0aGlzLmdldENhbnZhc0hlaWdodChjYW52YXMpKSAqIDIgKyAxO1xuICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfVxuICAgIHN0YXRpYyBnZXRWaWV3cG9ydE1vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCwgdmlld3BvcnQpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuY29udmVydFRvUmVjdGFuZ2xlKGNhbnZhcywgdmlld3BvcnQpO1xuICAgICAgICBjb25zdCBtb3VzZVggPSBldmVudC5vZmZzZXRYIC0gcmVjdC54MTtcbiAgICAgICAgY29uc3QgbW91c2VZID0gZXZlbnQub2Zmc2V0WSAtIHJlY3QueTE7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gcmVjdC54MiAtIHJlY3QueDE7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3QueTIgLSByZWN0LnkxO1xuICAgICAgICBjb25zdCB4ID0gKG1vdXNlWCAvIHdpZHRoKSAqIDIgLSAxO1xuICAgICAgICBjb25zdCB5ID0gLShtb3VzZVkgLyBoZWlnaHQpICogMiArIDE7XG4gICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9JbnRlcmFjdGl2ZVNwcml0ZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSW50ZXJhY3RpdmVNZXNoXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9DbGlja2FibGVPYmplY3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NsaWNrYWJsZUdyb3VwXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9DaGVja0JveE9iamVjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUmFkaW9CdXR0b25PYmplY3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1JhZGlvQnV0dG9uTWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU3RhdGVNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vTW91c2VFdmVudE1hbmFnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RocmVlTW91c2VFdmVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vVmlld1BvcnRVdGlsXCI7XG4iLCJpbXBvcnQge1xuICBDaGVja0JveE1lc2gsXG4gIENoZWNrQm94U3ByaXRlLFxuICBDbGlja2FibGVNZXNoLFxuICBDbGlja2FibGVTcHJpdGUsXG4gIE1vdXNlRXZlbnRNYW5hZ2VyLFxuICBSYWRpb0J1dHRvbk1hbmFnZXIsXG4gIFJhZGlvQnV0dG9uTWVzaCxcbiAgU3RhdGVNYXRlcmlhbFNldCxcbn0gZnJvbSBcIi4uXCI7XG5pbXBvcnQge1xuICBBbWJpZW50TGlnaHQsXG4gIEJveEdlb21ldHJ5LFxuICBDb2xvcixcbiAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgU3ByaXRlTWF0ZXJpYWwsXG4gIFRleHR1cmVMb2FkZXIsXG4gIFdlYkdMUmVuZGVyZXIsXG59IGZyb20gXCJ0aHJlZVwiO1xuXG5jb25zdCBXID0gMTI4MDtcbmNvbnN0IEggPSA5MDA7XG5sZXQgcmVuZGVyZXI7XG5sZXQgc2NlbmU7XG5sZXQgY2FtZXJhO1xuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICAvLyDjgrfjg7zjg7PjgpLkvZzmiJBcbiAgc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCBXIC8gSCwgMSwgNDAwKTtcbiAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAxMDApO1xuICBzY2VuZS5hZGQoY2FtZXJhKTtcblxuICBjb25zdCByZW5kZXJPcHRpb24gPSB7XG4gICAgY2FudmFzOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndlYmdsLWNhbnZhc1wiKSxcbiAgICBhbnRpYWxpYXM6IHRydWUsXG4gIH07XG4gIHJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIocmVuZGVyT3B0aW9uKTtcbiAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgQ29sb3IoMHgwMDAwMDApKTtcbiAgcmVuZGVyZXIuc2V0U2l6ZShXLCBIKTtcbiAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cbiAgLy/lubPooYzlhYnmupDjgqrjg5bjgrjjgqfjgq/jg4gobGlnaHQp44Gu6Kit5a6aXG4gIGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBBbWJpZW50TGlnaHQoMHhmZmZmZmYsIDEuMCk7XG4gIHNjZW5lLmFkZChhbWJpZW50TGlnaHQpO1xuXG4gIC8v44Oe44Km44K544Kk44OZ44Oz44OI44Gu5Y+W5b6X6ZaL5aeLXG4gIGNvbnN0IG1hbmFnZXIgPSBuZXcgTW91c2VFdmVudE1hbmFnZXIoc2NlbmUsIGNhbWVyYSwgcmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgdGVzdEJ1dHRvbigpO1xuICB0ZXN0Q2hlY2tib3goKTtcbiAgdGVzdFNwcml0ZSgpO1xuICB0ZXN0U2VsZWN0YWJsZVNwcml0ZSgpO1xuICB0ZXN0UmFkaW8oKTtcblxuICByZW5kZXIoKTtcbn07XG5cbi8qKlxuICogTWVzaOeUqOOBruODnuODhuODquOCouODq+OCu+ODg+ODiOOCkuaWsOimj+OBq+WPluW+l+OBmeOCi+OAglxuICogQHJldHVybnMge1N0YXRlTWF0ZXJpYWxTZXR9XG4gKi9cbmNvbnN0IGdldE1hdGVyaWFsU2V0ID0gKCkgPT4ge1xuICByZXR1cm4gbmV3IFN0YXRlTWF0ZXJpYWxTZXQoe1xuICAgIG5vcm1hbDogZ2V0TWVzaE1hdGVyaWFsKDAuNiksXG4gICAgb3ZlcjogZ2V0TWVzaE1hdGVyaWFsKDAuOCksXG4gICAgZG93bjogZ2V0TWVzaE1hdGVyaWFsKDEuMCksXG4gICAgbm9ybWFsU2VsZWN0OiBnZXRNZXNoTWF0ZXJpYWwoMC42LCAweGZmZmYwMCksXG4gICAgb3ZlclNlbGVjdDogZ2V0TWVzaE1hdGVyaWFsKDAuOCwgMHhmZmZmMDApLFxuICAgIGRvd25TZWxlY3Q6IGdldE1lc2hNYXRlcmlhbCgxLjAsIDB4ZmZmZjAwKSxcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRNZXNoTWF0ZXJpYWwgPSAob3BhY2l0eSwgY29sb3IpID0+IHtcbiAgaWYgKGNvbG9yID09IG51bGwpIGNvbG9yID0gMHhmZmZmZmY7XG4gIHJldHVybiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBvcGFjaXR5OiBvcGFjaXR5LFxuICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICB9KTtcbn07XG5cbi8qKlxuICog44K544OX44Op44Kk44OI55So44Gu44Oe44OG44Oq44Ki44Or44K744OD44OI44KS5paw6KaP44Gr55Sf5oiQ44GZ44KL44CCXG4gKi9cbmNvbnN0IGdldFNwcml0ZU1hdGVyaWFsU2V0ID0gKCkgPT4ge1xuICByZXR1cm4gbmV3IFN0YXRlTWF0ZXJpYWxTZXQoe1xuICAgIG5vcm1hbDogZ2V0U3ByaXRlTWF0ZXJpYWwoXCIuL2J0bjA0NV8wMS5wbmdcIiwgMS4wKSxcbiAgICBvdmVyOiBnZXRTcHJpdGVNYXRlcmlhbChcIi4vYnRuMDQ1XzAyLnBuZ1wiLCAxLjApLFxuICAgIGRvd246IGdldFNwcml0ZU1hdGVyaWFsKFwiLi9idG4wNDVfMDMucG5nXCIsIDEuMCksXG4gICAgbm9ybWFsU2VsZWN0OiBnZXRTcHJpdGVNYXRlcmlhbChcIi4vYnRuMDQ1XzAxLnBuZ1wiLCAwLjUpLFxuICAgIG92ZXJTZWxlY3Q6IGdldFNwcml0ZU1hdGVyaWFsKFwiLi9idG4wNDVfMDIucG5nXCIsIDAuNSksXG4gICAgZG93blNlbGVjdDogZ2V0U3ByaXRlTWF0ZXJpYWwoXCIuL2J0bjA0NV8wMy5wbmdcIiwgMC41KSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIOOCueODl+ODqeOCpOODiOeUqOODnuODhuODquOCouODq+OCkueUn+aIkOOBmeOCi1xuICogQHBhcmFtIGltZyDjg57jg4Pjg5fnlLvlg49VUkxcbiAqIEBwYXJhbSBvcGFjaXR5IOmAj+mBjuW6plxuICogQHBhcmFtIGNvbG9yIOOCq+ODqeODvFxuICogQHJldHVybnMge1Nwcml0ZU1hdGVyaWFsfVxuICovXG5jb25zdCBnZXRTcHJpdGVNYXRlcmlhbCA9IChpbWcsIG9wYWNpdHksIGNvbG9yKSA9PiB7XG4gIGlmIChjb2xvciA9PSBudWxsKSBjb2xvciA9IDB4ZmZmZmZmO1xuICByZXR1cm4gbmV3IFNwcml0ZU1hdGVyaWFsKHtcbiAgICBtYXA6IG5ldyBUZXh0dXJlTG9hZGVyKCkubG9hZChpbWcpLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBvcGFjaXR5OiBvcGFjaXR5LFxuICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICB9KTtcbn07XG5cbmNvbnN0IHRlc3RCdXR0b24gPSAoKSA9PiB7XG4gIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KDMsIDMsIDMpO1xuICBjb25zdCBjbGlja2FibGUgPSBuZXcgQ2xpY2thYmxlTWVzaCh7XG4gICAgZ2VvOiBnZW9tZXRyeSxcbiAgICBtYXRlcmlhbDogZ2V0TWF0ZXJpYWxTZXQoKSxcbiAgfSk7XG5cbiAgY2xpY2thYmxlLnBvc2l0aW9uLnNldCgtMTAsIDIwLCAwKTtcbiAgc2NlbmUuYWRkKGNsaWNrYWJsZSk7XG59O1xuXG5jb25zdCB0ZXN0Q2hlY2tib3ggPSAoKSA9PiB7XG4gIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KDMsIDMsIDMpO1xuICBjb25zdCBjbGlja2FibGUgPSBuZXcgQ2hlY2tCb3hNZXNoKHtcbiAgICBnZW86IGdlb21ldHJ5LFxuICAgIG1hdGVyaWFsOiBnZXRNYXRlcmlhbFNldCgpLFxuICB9KTtcblxuICBjbGlja2FibGUucG9zaXRpb24uc2V0KDAsIDIwLCAwKTtcbiAgc2NlbmUuYWRkKGNsaWNrYWJsZSk7XG59O1xuXG5jb25zdCB0ZXN0U3ByaXRlID0gKCkgPT4ge1xuICBjb25zdCBjbGlja2FibGUgPSBuZXcgQ2xpY2thYmxlU3ByaXRlKGdldFNwcml0ZU1hdGVyaWFsU2V0KCkpO1xuICBhbGlnblNwcml0ZShjbGlja2FibGUsIDEwKTtcbn07XG5cbmNvbnN0IHRlc3RTZWxlY3RhYmxlU3ByaXRlID0gKCkgPT4ge1xuICBjb25zdCBzZWxlY3RhYmxlID0gbmV3IENoZWNrQm94U3ByaXRlKGdldFNwcml0ZU1hdGVyaWFsU2V0KCkpO1xuICBhbGlnblNwcml0ZShzZWxlY3RhYmxlLCAyMCk7XG59O1xuXG5jb25zdCBhbGlnblNwcml0ZSA9IChzcHJpdGUsIHgpID0+IHtcbiAgc3ByaXRlLnBvc2l0aW9uLnNldCh4LCAyMCwgMCk7XG4gIGNvbnN0IHNjYWxlID0gNC4wO1xuICBzcHJpdGUuc2NhbGUuc2V0KHNjYWxlLCBzY2FsZSwgc2NhbGUpO1xuICBzY2VuZS5hZGQoc3ByaXRlKTtcbn07XG5cbmNvbnN0IHRlc3RSYWRpbyA9ICgpID0+IHtcbiAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoMywgMywgMyk7XG5cbiAgY29uc3QgaW5pdEJ1dHRvbiA9ICh4LCBidXR0b25WYWx1ZSkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBSYWRpb0J1dHRvbk1lc2goe1xuICAgICAgZ2VvOiBnZW9tZXRyeSxcbiAgICAgIG1hdGVyaWFsOiBnZXRNYXRlcmlhbFNldCgpLFxuICAgIH0pO1xuICAgIGJ1dHRvbi5wb3NpdGlvbi5zZXQoeCwgLTEwLCAwKTtcbiAgICBidXR0b24ubW9kZWwudmFsdWUgPSBidXR0b25WYWx1ZTtcbiAgICBzY2VuZS5hZGQoYnV0dG9uKTtcbiAgICByZXR1cm4gYnV0dG9uO1xuICB9O1xuXG4gIGNvbnN0IG1hbmFnZXIgPSBuZXcgUmFkaW9CdXR0b25NYW5hZ2VyKCk7XG5cbiAgbWFuYWdlci5hZGRCdXR0b24oXG4gICAgaW5pdEJ1dHRvbigtMTAsIFwiYnV0dG9uMDFcIiksXG4gICAgaW5pdEJ1dHRvbigwLCBNYXRoLlBJKSxcbiAgICBpbml0QnV0dG9uKDEwLCB7IHZhbHVlMDE6IDEsIHZhbHVlMDI6IDIgfSlcbiAgKTtcbiAgbWFuYWdlci5hZGRCdXR0b24oaW5pdEJ1dHRvbigyMCwgdW5kZWZpbmVkKSk7XG5cbiAgbWFuYWdlci5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsIChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coZS5tb2RlbC52YWx1ZSk7XG4gIH0pO1xufTtcblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbndpbmRvdy5vbmxvYWQgPSBvbkRvbUNvbnRlbnRzTG9hZGVkO1xuIl0sIm5hbWVzIjpbIlNwcml0ZSIsIkNoZWNrQm94T2JqZWN0IiwiQ2xpY2thYmxlT2JqZWN0IiwiUmFkaW9CdXR0b25PYmplY3QiLCJJbnRlcmFjdGl2ZVNwcml0ZSIsImNvbnN0cnVjdG9yIiwibWF0ZXJpYWwiLCJjdG9yIiwibW9kZWwiLCJ2aWV3IiwiQ2xpY2thYmxlU3ByaXRlIiwiQ2hlY2tCb3hTcHJpdGUiLCJSYWRpb0J1dHRvblNwcml0ZSIsIk1lc2giLCJJbnRlcmFjdGl2ZU1lc2giLCJwYXJhbWV0ZXJzIiwiZ2VvIiwiQ2xpY2thYmxlTWVzaCIsIkNoZWNrQm94TWVzaCIsIlJhZGlvQnV0dG9uTWVzaCIsIlRocmVlTW91c2VFdmVudFV0aWwiLCJtYXRlcmlhbFNldCIsIl9tYXRlcmlhbFNldCIsInZhbHVlIiwiaXNTYW1lIiwidXBkYXRlTWF0ZXJpYWwiLCJpc092ZXIiLCJfaXNPdmVyIiwiaXNQcmVzcyIsIl9pc1ByZXNzIiwiX2EiLCJfZW5hYmxlIiwibW91c2VFbmFibGVkIiwiZnJvemVuIiwic3RhdGUiLCJfYWxwaGEiLCJvbk1vdXNlRG93bkhhbmRsZXIiLCJldmVudCIsImNoZWNrQWN0aXZpdHkiLCJ1cGRhdGVTdGF0ZSIsImRpc3BhdGNoRXZlbnQiLCJvbk1vdXNlVXBIYW5kbGVyIiwiY3VycmVudFByZXNzIiwibmV4dFN0YXRlIiwib25Nb3VzZUNsaWNrIiwiZSIsImdlbmVyYXRlIiwib25Nb3VzZU92ZXJIYW5kbGVyIiwib25Nb3VzZU92ZXJPdXRIYW5kbGVyIiwib25Nb3VzZU91dEhhbmRsZXIiLCJ0eXBlIiwiYWxwaGEiLCJudW1iZXIiLCJlbmFibGUiLCJzd2l0Y2hFbmFibGUiLCJkaXNhYmxlIiwiX2IiLCJzZXRPcGFjaXR5Iiwic3RhdGVNYXQiLCJnZXRNYXRlcmlhbCIsImJvb2wiLCJHcm91cCIsIkNsaWNrYWJsZUdyb3VwIiwiYXJndW1lbnRzIiwiX2lzU2VsZWN0Iiwic2VsZWN0aW9uIiwiX2lzRnJvemVuIiwiaXNGcm96ZW4iLCJFdmVudERpc3BhdGNoZXIiLCJSYWRpb0J1dHRvbk1hbmFnZXIiLCJfbW9kZWxzIiwib25TZWxlY3RlZEJ1dHRvbiIsImlzU2VsZWN0ZWQiLCJzZWxlY3QiLCJhZGRCdXR0b24iLCJidXR0b25zIiwiZm9yRWFjaCIsImJ0biIsImFkZE1vZGVsIiwicHVzaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVCdXR0b24iLCJidXR0b24iLCJyZW1vdmVNb2RlbCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwid2FybiIsIl9zZWxlY3RlZCIsIm1kbCIsImV2dCIsInNlbGVjdGVkIiwibW9kZWxzIiwiU3RhdGVNYXRlcmlhbCIsInVwZGF0ZUFscGhhIiwiX21hdGVyaWFsIiwiQXJyYXkiLCJhbHBoYUFycmF5IiwiZ2V0QWxwaGFBcnJheSIsIm9wYWNpdHkiLCJtYXRBcnJheSIsIm4iLCJsZW5ndGgiLCJhcnJheSIsImkiLCJTdGF0ZU1hdGVyaWFsU2V0IiwicGFyYW0iLCJub3JtYWwiLCJvdmVyIiwiaW5pdE1hdGVyaWFsIiwiZG93biIsIm5vcm1hbFNlbGVjdCIsIm92ZXJTZWxlY3QiLCJkb3duU2VsZWN0IiwiaW5pdCIsImRlZmF1bHRNYXRlcmlhbCIsIkVycm9yIiwibWF0ZXJpYWxzIiwibWF0IiwiUkFGVGlja2VyIiwiUmF5Y2FzdGVyIiwiVmVjdG9yMiIsIlZpZXdQb3J0VXRpbCIsIk1vdXNlRXZlbnRNYW5hZ2VyIiwic2NlbmUiLCJjYW1lcmEiLCJjYW52YXMiLCJvcHRpb24iLCJfYyIsInJheWNhc3RlciIsIm1vdXNlIiwiaGFzVGhyb3R0bGVkIiwidGhyb3R0bGluZ0RlbHRhIiwib25UaWNrIiwiZGVsdGEiLCJ0aHJvdHRsaW5nVGltZV9tcyIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJwcmV2ZW50RGVmYXVsdCIsImludGVyc2VjdHMiLCJnZXRJbnRlcnNlY3RzIiwiY2xlYXJPdmVyIiwiYmVmb3JlT3ZlciIsImN1cnJlbnRPdmVyIiwiaW50ZXJzZWN0IiwiY2hlY2tlZCIsImNoZWNrVGFyZ2V0Iiwib2JqZWN0IiwiaW5jbHVkZXMiLCJvbkJ1dHRvbkhhbmRsZXIiLCJvbkRvY3VtZW50TW91c2VVcERvd24iLCJldmVudFR5cGUiLCJpc0NvbnRhaW4iLCJ2aWV3cG9ydCIsImNoZWNrSW50ZXJzZWN0cyIsInJlY3Vyc2l2ZSIsInRhcmdldHMiLCJjaGlsZHJlbiIsIm9uIiwiaW1wbGVtZW50c0lDbGlja2FibGVPYmplY3QzRCIsImFyZyIsInRhcmdldCIsImhhc1RhcmdldCIsInBhcmVudCIsImNvbnZlcnRUb01vdXNlUG9zaXRpb24iLCJzZXRGcm9tQ2FtZXJhIiwiaW50ZXJzZWN0T2JqZWN0cyIsIm1vZGVsT3JWaWV3IiwiZ2V0TW9kZWwiLCJnZXRTZWxlY3Rpb24iLCJjbG9uZSIsImdldENhbnZhc0hlaWdodCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJwYXJzZUludCIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJnZXRDYW52YXNXaWR0aCIsImNvbnZlcnRUb1JlY3RhbmdsZSIsIngxIiwieCIsIngyIiwieTEiLCJ5IiwieTIiLCJyZWN0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJnZXRNb3VzZVBvc2l0aW9uIiwic2V0IiwiZ2V0Vmlld3BvcnRNb3VzZVBvc2l0aW9uIiwiZ2V0Q2FudmFzTW91c2VQb3NpdGlvbiIsIm1vdXNlWCIsIm1vdXNlWSIsIkFtYmllbnRMaWdodCIsIkJveEdlb21ldHJ5IiwiQ29sb3IiLCJNZXNoQmFzaWNNYXRlcmlhbCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiU2NlbmUiLCJTcHJpdGVNYXRlcmlhbCIsIlRleHR1cmVMb2FkZXIiLCJXZWJHTFJlbmRlcmVyIiwiVyIsIkgiLCJyZW5kZXJlciIsIm9uRG9tQ29udGVudHNMb2FkZWQiLCJwb3NpdGlvbiIsImFkZCIsInJlbmRlck9wdGlvbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhbnRpYWxpYXMiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsInNldFBpeGVsUmF0aW8iLCJhbWJpZW50TGlnaHQiLCJtYW5hZ2VyIiwiZG9tRWxlbWVudCIsInRlc3RCdXR0b24iLCJ0ZXN0Q2hlY2tib3giLCJ0ZXN0U3ByaXRlIiwidGVzdFNlbGVjdGFibGVTcHJpdGUiLCJ0ZXN0UmFkaW8iLCJyZW5kZXIiLCJnZXRNYXRlcmlhbFNldCIsImdldE1lc2hNYXRlcmlhbCIsImNvbG9yIiwidHJhbnNwYXJlbnQiLCJnZXRTcHJpdGVNYXRlcmlhbFNldCIsImdldFNwcml0ZU1hdGVyaWFsIiwiaW1nIiwibWFwIiwibG9hZCIsImdlb21ldHJ5IiwiY2xpY2thYmxlIiwiYWxpZ25TcHJpdGUiLCJzZWxlY3RhYmxlIiwic3ByaXRlIiwic2NhbGUiLCJpbml0QnV0dG9uIiwiYnV0dG9uVmFsdWUiLCJNYXRoIiwiUEkiLCJ2YWx1ZTAxIiwidmFsdWUwMiIsInVuZGVmaW5lZCIsImxvZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9ubG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///322\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(t=0;t<deferred.length;t++){for(var[U,F,B]=deferred[t],g=!0,C=0;C<U.length;C++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[C])))?U.splice(C--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(t--,1);var s=F();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>B;t--)deferred[t]=deferred[t-1];deferred[t]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={451:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,C,s]=F,t=0;if(g.some((U=>0!==Q[U]))){for(B in C)__webpack_require__.o(C,B)&&(__webpack_require__.m[B]=C[B]);if(s)var l=s(__webpack_require__)}for(U&&U(F);t<g.length;t++)I=g[t],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_threejs_interactive_object=self.webpackChunk_masatomakino_threejs_interactive_object||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(322)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();