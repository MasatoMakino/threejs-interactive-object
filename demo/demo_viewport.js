(()=>{"use strict";var __webpack_modules__={29:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./esm/view/ClickableGroup.js\n\n\nclass ClickableGroup extends (/* unused pure expression or super */ null && (Group)) {\n  constructor() {\n    super();\n    this.interactionHandler = new ButtonInteractionHandler({\n      view: this\n    });\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./esm/view/InteractiveMesh.js\n\n\nclass InteractiveMesh extends three_module/* Mesh */.Kj0 {\n  constructor(parameters, ctor) {\n    super(parameters.geo);\n    this.interactionHandler = new ctor({\n      view: this,\n      material: parameters.material\n    });\n  }\n}\nclass ClickableMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, ButtonInteractionHandler_ButtonInteractionHandler);\n  }\n}\nclass CheckBoxMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, CheckBoxInteractionHandler_CheckBoxInteractionHandler);\n  }\n}\nclass RadioButtonMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, RadioButtonInteractionHandler_RadioButtonInteractionHandler);\n  }\n}\n;// CONCATENATED MODULE: ./esm/view/InteractiveSprite.js\n\n\nclass InteractiveSprite extends three_module/* Sprite */.jyi {\n  constructor(material, ctor) {\n    super();\n    this.interactionHandler = new ctor({\n      view: this,\n      material: material\n    });\n  }\n}\nclass ClickableSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, ButtonInteractionHandler_ButtonInteractionHandler);\n  }\n}\nclass CheckBoxSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, CheckBoxInteractionHandler_CheckBoxInteractionHandler);\n  }\n}\nclass RadioButtonSprite extends (/* unused pure expression or super */ null && (InteractiveSprite)) {\n  constructor(material) {\n    super(material, RadioButtonInteractionHandler);\n  }\n}\n;// CONCATENATED MODULE: ./esm/view/index.js\n\n\n\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.mjs\nvar eventemitter3 = __webpack_require__(146);\n;// CONCATENATED MODULE: ./esm/interactionHandler/ButtonInteractionHandler.js\n\n\n/**\n * The `ButtonInteractionHandler` class is responsible for managing the interactions with button-like objects.\n * Each button-like object can be represented as a `ClickableMesh`, `ClickableSprite`, or `ClickableGroup`, and can have an associated value.\n * The `ButtonInteractionHandler` class  handle the interaction events and update the state of the button-like object accordingly.\n *\n * The generic parameter `Value` represents the type of the `value` property associated with this button.\n */\nclass ButtonInteractionHandler_ButtonInteractionHandler extends eventemitter3/* default */.Z {\n  get materialSet() {\n    return this._materialSet;\n  }\n  set materialSet(value) {\n    const isSame = value === this._materialSet;\n    this._materialSet = value;\n    if (!isSame) {\n      this.updateMaterial();\n    }\n  }\n  get isOver() {\n    return this._isOver;\n  }\n  get isPress() {\n    return this._isPress;\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor(parameters) {\n    super();\n    this._isPress = false;\n    this._isOver = false;\n    this._enable = true;\n    this.mouseEnabled = true;\n    this.frozen = false;\n    this.state = "normal";\n    this._alpha = 1.0;\n    this.view = parameters.view;\n    this._materialSet ??= parameters.material;\n    this.updateMaterial();\n  }\n  onMouseDownHandler(event) {\n    if (!this.checkActivity()) return;\n    this._isPress = true;\n    this.updateState("down");\n    this.emit(event.type, event);\n  }\n  onMouseUpHandler(event) {\n    if (!this.checkActivity()) return;\n    const currentPress = this._isPress;\n    this._isPress = false;\n    const nextState = this._isOver ? "over" : "normal";\n    this.updateState(nextState);\n    this.emit(event.type, event);\n    if (this._isPress != currentPress) {\n      this.onMouseClick();\n      const e = ThreeMouseEventUtil.generate("click", this);\n      this.emit(e.type, event);\n    }\n  }\n  onMouseClick() {}\n  onMouseOverHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n  onMouseOutHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n  onMouseOverOutHandler(event) {\n    this._isOver = event.type === "over"; //マウスオーバーの判定はdisable状態でも行う。\n    if (!this.checkActivity()) return;\n    this.updateState(this._isOver ? "over" : "normal");\n    this.emit(event.type, event);\n  }\n  set alpha(number) {\n    this._alpha = number;\n    this.updateMaterial();\n  }\n  updateState(state) {\n    this.state = state;\n    this.updateMaterial();\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return this._enable && !this.frozen;\n  }\n  enable() {\n    this.switchEnable(true);\n  }\n  disable() {\n    this.switchEnable(false);\n  }\n  updateMaterial() {\n    this._materialSet?.setOpacity(this._alpha);\n    const stateMat = this._materialSet?.getMaterial(this.state, this._enable);\n    if (!stateMat) return;\n    switch (this.view.type) {\n      case "Mesh":\n      case "Sprite":\n        this.view.material = stateMat.material;\n        break;\n      case "Group":\n      default:\n        break;\n    }\n  }\n  switchEnable(bool) {\n    this._enable = bool;\n    this.state = bool ? "normal" : "disable";\n    this.updateMaterial();\n  }\n}\n/**\n * @deprecated Use ButtonInteractionHandler instead. This class will be removed in next minor version.\n */\nclass ClickableObject extends (/* unused pure expression or super */ null && (ButtonInteractionHandler_ButtonInteractionHandler)) {\n  constructor(parameters) {\n    console.warn("This class is deprecated. Use ButtonInteractionHandler instead.");\n    super(parameters);\n  }\n}\n;// CONCATENATED MODULE: ./esm/interactionHandler/CheckBoxInteractionHandler.js\n\n\n/**\n * The `CheckBoxInteractionHandler` class extends the `ButtonInteractionHandler` class to manage interactions with checkbox-like objects.\n * In addition to handling interaction events, this class also maintains the selection state of the checkbox-like object.\n *\n * The generic parameter `Value` represents the type of the `value` property associated with this checkbox.\n */\nclass CheckBoxInteractionHandler_CheckBoxInteractionHandler extends ButtonInteractionHandler_ButtonInteractionHandler {\n  constructor() {\n    super(...arguments);\n    this._isSelect = false;\n  }\n  /**\n   * クリックイベント時の処理\n   * "click"イベントはマウスイベント類の必ず最後に発生するので\n   * ここでisSelect状態を一括管理する。\n   */\n  onMouseClick() {\n    this._isSelect = !this._isSelect;\n    const e = ThreeMouseEventUtil.generate("select", this);\n    this.emit(e.type, e);\n    this.updateMaterial();\n  }\n  get selection() {\n    return this._isSelect;\n  }\n  set selection(bool) {\n    this._isSelect = bool;\n    this.updateState("normal");\n  }\n  updateMaterial() {\n    this.materialSet?.setOpacity(this._alpha);\n    const stateMat = this.materialSet?.getMaterial(this.state, this._enable, this._isSelect);\n    if (stateMat?.material != null) {\n      this.view.material = stateMat.material;\n    }\n  }\n}\n/**\n * @deprecated Use CheckBoxInteractionHandler instead. This class will be removed in next minor version.\n */\nclass CheckBoxObject extends (/* unused pure expression or super */ null && (CheckBoxInteractionHandler_CheckBoxInteractionHandler)) {\n  constructor(parameters) {\n    console.warn("This class is deprecated. Use CheckBoxInteractionHandler instead.");\n    super(parameters);\n  }\n}\n;// CONCATENATED MODULE: ./esm/interactionHandler/RadioButtonInteractionHandler.js\n\nclass RadioButtonInteractionHandler_RadioButtonInteractionHandler extends CheckBoxInteractionHandler_CheckBoxInteractionHandler {\n  constructor() {\n    super(...arguments);\n    this._isFrozen = false;\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * ラジオボタンは選択中は自身の状態を変更できない。\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return this._enable && !this._isFrozen;\n  }\n  get isFrozen() {\n    return this._isFrozen;\n  }\n  set isFrozen(bool) {\n    this._isFrozen = bool;\n  }\n}\n/**\n * @deprecated Use RadioButtonInteractionHandler instead. This class will be removed in next minor version.\n */\nclass RadioButtonObject extends (/* unused pure expression or super */ null && (RadioButtonInteractionHandler_RadioButtonInteractionHandler)) {\n  constructor(parameters) {\n    console.warn("This class is deprecated. Use RadioButtonInteractionHandler instead.");\n    super(parameters);\n  }\n}\n;// CONCATENATED MODULE: ./esm/interactionHandler/index.js\n\n\n\n;// CONCATENATED MODULE: ./esm/RadioButtonManager.js\n\n\nclass RadioButtonManager extends eventemitter3/* default */.Z {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    /**\n     * このマネージャーの管理下のボタン\n     */\n    this._interactionHandlers = [];\n    /**\n     * 管理下のボタンが選択された場合の処理\n     * @param {Event} e\n     */\n    this.onSelectedButton = e => {\n      if (e.isSelected) {\n        this.select(e.interactionHandler);\n      }\n    };\n  }\n  /**\n   * このマネージャーの管理下にボタンを追加する\n   * @param {IClickableObject3D[]} buttons\n   */\n  addButton(...buttons) {\n    buttons.forEach(btn => {\n      this.addInteractionHandler(btn.interactionHandler);\n    });\n  }\n  addInteractionHandler(interactionHandler) {\n    this._interactionHandlers.push(interactionHandler);\n    interactionHandler.on("select", this.onSelectedButton);\n  }\n  /**\n   * ボタンを管理下から外す。\n   * ボタン自体の削除は行わない。\n   * @param {IClickableObject3D} button\n   */\n  removeButton(button) {\n    this.removeInteractionHandler(button.interactionHandler);\n  }\n  removeInteractionHandler(interactionHandler) {\n    const index = this._interactionHandlers.indexOf(interactionHandler);\n    if (index > -1) {\n      this._interactionHandlers.splice(index, 1);\n      interactionHandler.off("select", this.onSelectedButton);\n    }\n    return interactionHandler;\n  }\n  /**\n   * 特定のボタンを選択する\n   * @param {RadioButtonInteractionHandler} interactionHandler\n   */\n  select(interactionHandler) {\n    const index = this._interactionHandlers.indexOf(interactionHandler);\n    if (index === -1) {\n      console.warn("管理下でないボタンが選択処理されました。");\n      return;\n    }\n    //選択済みのボタンを再度渡されても反応しない。\n    if (interactionHandler === this._selected && interactionHandler.isFrozen) {\n      return;\n    }\n    this._selected = interactionHandler;\n    for (let mdl of this._interactionHandlers) {\n      mdl.selection = mdl.isFrozen = mdl === interactionHandler;\n    }\n    const evt = ThreeMouseEventUtil.generate("select", interactionHandler);\n    this.emit(evt.type, evt);\n  }\n  get selected() {\n    return this._selected;\n  }\n  get interactionHandlers() {\n    return this._interactionHandlers;\n  }\n}\n;// CONCATENATED MODULE: ./esm/StateMaterial.js\nclass StateMaterial {\n  constructor(material) {\n    this.alpha = 1.0;\n    this.material = material;\n  }\n  updateAlpha() {\n    if (this._material instanceof Array) {\n      this.alphaArray = this.getAlphaArray();\n    } else {\n      this.alpha = this._material.opacity;\n    }\n  }\n  getAlphaArray() {\n    const matArray = this._material;\n    const n = matArray.length;\n    const array = [];\n    for (let i = 0; i < n; i++) {\n      array.push(matArray[i].opacity);\n    }\n    return array;\n  }\n  set material(value) {\n    this._material = value;\n    this.updateAlpha();\n  }\n  get material() {\n    return this._material;\n  }\n  setOpacity(opacity) {\n    if (this._material instanceof Array) {\n      const n = this._material.length;\n      for (let i = 0; i < n; i++) {\n        const material = this._material[i];\n        material.opacity = opacity * this.alphaArray[i];\n      }\n    } else {\n      this._material.opacity = opacity * this.alpha;\n    }\n  }\n}\nclass StateMaterialSet {\n  constructor(param) {\n    this.materials = [];\n    this.normal = new StateMaterial(param.normal);\n    this.over = StateMaterialSet.initMaterial(param.over, this.normal);\n    this.down = StateMaterialSet.initMaterial(param.down, this.normal);\n    this.disable = StateMaterialSet.initMaterial(param.disable, this.normal);\n    this.normalSelect = StateMaterialSet.initMaterial(param.normalSelect, this.normal);\n    this.overSelect = StateMaterialSet.initMaterial(param.overSelect, this.normal);\n    this.downSelect = StateMaterialSet.initMaterial(param.downSelect, this.normal);\n    this.init();\n  }\n  static initMaterial(value, defaultMaterial) {\n    if (value == null) return defaultMaterial;\n    return new StateMaterial(value);\n  }\n  init() {\n    if (this.normal == null) {\n      throw new Error("通常状態のマテリアルが指定されていません。");\n    }\n    this.materials = [this.normal, this.normalSelect, this.over, this.overSelect, this.down, this.downSelect, this.disable];\n  }\n  getMaterial(state, mouseEnabled, isSelected = false) {\n    //無効状態はstateよりも優先\n    if (!mouseEnabled) {\n      return this.disable;\n    }\n    switch (state) {\n      case "normal":\n        return isSelected ? this.normalSelect : this.normal;\n      case "down":\n        return isSelected ? this.downSelect : this.down;\n      case "over":\n        return isSelected ? this.overSelect : this.over;\n    }\n    return this.normal;\n  }\n  setOpacity(opacity) {\n    this.materials.forEach(mat => {\n      mat.setOpacity(opacity);\n    });\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(905);\n;// CONCATENATED MODULE: ./esm/MouseEventManager.js\n\n\n\nclass MouseEventManager {\n  /**\n   *\n   * @param scene\n   * @param camera\n   * @param canvas\n   * @param option\n   */\n  constructor(scene, camera, canvas, option) {\n    this.raycaster = new three_module/* Raycaster */.iMs();\n    this.mouse = new three_module/* Vector2 */.FM8();\n    this.currentOver = [];\n    this.hasThrottled = false;\n    this.throttlingDelta = 0;\n    this.onTick = e => {\n      this.throttlingDelta += Math.max(e.delta, 0); //経過時間がマイナスになることはありえないので、0未満の場合は0をセットする。\n      if (this.throttlingDelta < this.throttlingTime_ms) {\n        return;\n      }\n      this.hasThrottled = false;\n      this.throttlingDelta %= this.throttlingTime_ms;\n    };\n    this.onDocumentMouseMove = event => {\n      if (this.hasThrottled) return;\n      this.hasThrottled = true;\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n      if (intersects.length === 0) {\n        this.clearOver();\n        return;\n      }\n      const beforeOver = this.currentOver;\n      this.currentOver = [];\n      for (let intersect of intersects) {\n        const checked = this.checkTarget(intersect.object, "over");\n        if (checked) break;\n      }\n      beforeOver?.forEach(btn => {\n        if (!this.currentOver.includes(btn)) {\n          MouseEventManager.onButtonHandler(btn, "out");\n        }\n      });\n    };\n    /**\n     * カンバス上でマウスダウンかマウスアップが行われた際のイベントハンドラー\n     * マウス座標から対象となるObject3Dを探し出して操作を行う。\n     * @param {MouseEvent} event\n     */\n    this.onDocumentMouseUpDown = event => {\n      let eventType = "down";\n      switch (event.type) {\n        case "pointerdown":\n          eventType = "down";\n          break;\n        case "pointerup":\n          eventType = "up";\n          break;\n      }\n      if (!ViewPortUtil.isContain(this.canvas, this.viewport, event) && eventType === "down") {\n        return;\n      }\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n      this.checkIntersects(intersects, eventType);\n    };\n    this.camera = camera;\n    this.scene = scene;\n    this.throttlingTime_ms = option?.throttlingTime_ms ?? 33;\n    this.viewport = option?.viewport;\n    this.recursive = option?.recursive ?? true;\n    this.targets = option?.targets ?? this.scene.children;\n    this.canvas = canvas;\n    canvas.addEventListener("pointermove", this.onDocumentMouseMove, false);\n    canvas.addEventListener("pointerdown", this.onDocumentMouseUpDown, false);\n    canvas.addEventListener("pointerup", this.onDocumentMouseUpDown, false);\n    esm/* RAFTicker */.F.on("tick", this.onTick);\n  }\n  /**\n   * 現在マウスオーバーしている対象をなしにする。\n   * もし、すでにマウスオーバー対象が存在するなら、マウスアウトハンドラーを呼び出した後にクリアする。\n   */\n  clearOver() {\n    this.currentOver?.forEach(over => {\n      MouseEventManager.onButtonHandler(over, "out");\n    });\n    this.currentOver = [];\n  }\n  /**\n   * マウスの座標にかかっているオブジェクト一覧から、操作対象を検索し\n   * 指定されたタイプのハンドラー関数を実行させる。\n   * 重なり合ったオブジェクトがある場合、最前面から検索を開始する。\n   * 操作対象が見つかった時点で処理は中断され、背面オブジェクトは操作対象にならない。\n   *\n   * @param {Intersection[]} intersects\n   * @param {keyof ThreeMouseEventMap} type\n   */\n  checkIntersects(intersects, type) {\n    const n = intersects.length;\n    if (n === 0) return;\n    for (let i = 0; i < n; i++) {\n      const checked = this.checkTarget(intersects[i].object, type);\n      if (checked) {\n        break;\n      }\n    }\n  }\n  /**\n   * ボタンの各種イベントハンドラーメソッドを、typeにしたがって実行する。\n   * @param {IClickableObject3D} btn\n   * @param {keyof ThreeMouseEventMap} type\n   */\n  static onButtonHandler(btn, type) {\n    switch (type) {\n      case "down":\n        btn.interactionHandler.onMouseDownHandler(ThreeMouseEventUtil.generate(type, btn));\n        return;\n      case "up":\n        btn.interactionHandler.onMouseUpHandler(ThreeMouseEventUtil.generate(type, btn));\n        return;\n      case "over":\n        if (!btn.interactionHandler.isOver) {\n          btn.interactionHandler.onMouseOverHandler(ThreeMouseEventUtil.generate(type, btn));\n        }\n        return;\n      case "out":\n        if (btn.interactionHandler.isOver) {\n          btn.interactionHandler.onMouseOutHandler(ThreeMouseEventUtil.generate(type, btn));\n        }\n        return;\n    }\n  }\n  /**\n   * IClickableObject3Dインターフェースを実装しているか否かを判定する。\n   * ユーザー定義Type Guard\n   * @param arg\n   * @private\n   */\n  static implementsIClickableObject3D(arg) {\n    return arg !== null && typeof arg === "object" && arg.interactionHandler !== null && typeof arg.interactionHandler === "object" && arg.interactionHandler.mouseEnabled !== null && typeof arg.interactionHandler.mouseEnabled === "boolean";\n  }\n  /**\n   * 非推奨になったIClickableObject3Dインターフェースのmodelプロパティを実装しているか否かを判定する。\n   * @param arg\n   */\n  static implementsDepartedIClickableObject3D(arg) {\n    return arg !== null && typeof arg === "object" && arg.model !== null && typeof arg.model === "object";\n  }\n  /**\n   * 指定されたtargetオブジェクトから親方向に、クリッカブルインターフェースを継承しているオブジェクトを検索する。\n   * オブジェクトを発見した場合はtrueを、発見できない場合はfalseを返す。\n   *\n   * @param target\n   * @param type\n   * @param hasTarget\n   * @protected\n   */\n  checkTarget(target, type, hasTarget = false) {\n    if (MouseEventManager.implementsDepartedIClickableObject3D(target)) {\n      console.warn("Deprecated: IClickableObject3D.model is deprecated. Please use IClickableObject3D.interactionHandler.");\n    }\n    //クリッカブルインターフェースを継承しているなら判定OK\n    if (target != null && MouseEventManager.implementsIClickableObject3D(target) && target.interactionHandler.mouseEnabled) {\n      if (type === "over") {\n        this.currentOver.push(target);\n      }\n      MouseEventManager.onButtonHandler(target, type);\n      return this.checkTarget(target.parent, type, true);\n    }\n    //継承していないならその親を探索継続。\n    //ターゲットから上昇して探す。\n    if (target != null && target.parent != null && target.parent.type !== "Scene") {\n      return this.checkTarget(target.parent, type, hasTarget);\n    }\n    //親がシーンの場合は探索終了。\n    return hasTarget;\n  }\n  getIntersects(event) {\n    ViewPortUtil.convertToMousePosition(this.canvas, event, this.viewport, this.mouse);\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    return this.raycaster.intersectObjects(this.targets, this.recursive);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ThreeMouseEvent.js\nclass ThreeMouseEventUtil {\n  static generate(type, handlerOrView) {\n    const interactionHandler = ThreeMouseEventUtil.getInteractionHandler(handlerOrView);\n    const getSelection = () => {\n      if (type === "select") {\n        return ThreeMouseEventUtil.getSelection(interactionHandler);\n      }\n      return undefined;\n    };\n    return {\n      type,\n      interactionHandler,\n      isSelected: getSelection()\n    };\n  }\n  static getInteractionHandler(handlerOrView) {\n    if (handlerOrView != null && "interactionHandler" in handlerOrView) {\n      return handlerOrView.interactionHandler;\n    }\n    return handlerOrView;\n  }\n  /**\n   * SELECTイベントの場合は、対象ボタンの選択状態を取得\n   * @param interactionHandler\n   */\n  static getSelection(interactionHandler) {\n    if (interactionHandler != null && "selection" in interactionHandler) {\n      return !!interactionHandler["selection"];\n    } else {\n      throw new Error("選択可能なボタン以外を引数にして、SELECTイベントをインスタンス化しました。SELECTイベントはISelectableObject3Dを実装したクラスとともにインスタンス化してください。");\n    }\n  }\n  static clone(e) {\n    return ThreeMouseEventUtil.generate(e.type, e.interactionHandler);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ViewPortUtil.js\n\n/**\n * ViewPort矩形に関する処理を受け持つユーティリティクラス\n */\nclass ViewPortUtil {\n  /**\n   * canvasの高さを取得する。\n   *\n   * three.jsのWebGLRendererは、devicePixelRatioにあわせてcanvas.heightを変更する。\n   * ブラウザの拡大縮小を行うと、devicePixelRatioが変更されるためcanvas.heightを取得できない。\n   * そのためまずstyleから高さを取得し、styleがない場合はdevicePixelRatioを加味した高さを取得する。\n   *\n   * @param canvas\n   * @private\n   */\n  static getCanvasHeight(canvas) {\n    return this.getCanvasSize(canvas, "height");\n  }\n  static getCanvasWidth(canvas) {\n    return this.getCanvasSize(canvas, "width");\n  }\n  static getCanvasSize(canvas, propName) {\n    const style = canvas.style;\n    if (style.width && style.height) {\n      return parseInt(style[propName]);\n    } else if (window.devicePixelRatio != null) {\n      return canvas[propName] / window.devicePixelRatio;\n    }\n    return canvas[propName];\n  }\n  /**\n   * ViewportをCanvas内のRectangleに変換する\n   * @param canvas\n   * @param viewport\n   */\n  static convertToRectangle(canvas, viewport) {\n    const height = this.getCanvasHeight(canvas);\n    return {\n      x1: viewport.x,\n      x2: viewport.x + viewport.width,\n      y1: height - (viewport.y + viewport.height),\n      y2: height - viewport.y\n    };\n  }\n  /**\n   * マウスポインターが指定されたviewport内に収まっているかを判定する。\n   * @param canvas\n   * @param viewport\n   * @param event\n   */\n  static isContain(canvas, viewport, event) {\n    if (viewport == null) {\n      return true;\n    }\n    const rect = this.convertToRectangle(canvas, viewport);\n    return event.offsetX >= rect.x1 && event.offsetX <= rect.x2 && event.offsetY >= rect.y1 && event.offsetY <= rect.y2;\n  }\n  /**\n   * マウスイベントをWebGL座標系に変換する\n   * @param canvas\n   * @param event\n   * @param viewport\n   * @param mouse オプション 指定された場合、結果をこのVector2に上書きする\n   */\n  static convertToMousePosition(canvas, event, viewport, mouse) {\n    const {\n      x,\n      y\n    } = this.getMousePosition(canvas, event, viewport);\n    if (mouse) {\n      mouse.set(x, y);\n      return mouse;\n    }\n    return new three_module/* Vector2 */.FM8(x, y);\n  }\n  static getMousePosition(canvas, event, viewport) {\n    if (viewport) {\n      return this.getViewportMousePosition(canvas, event, viewport);\n    }\n    return this.getCanvasMousePosition(canvas, event);\n  }\n  static getCanvasMousePosition(canvas, event) {\n    const x = event.offsetX / this.getCanvasWidth(canvas) * 2 - 1;\n    const y = -(event.offsetY / this.getCanvasHeight(canvas)) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n  static getViewportMousePosition(canvas, event, viewport) {\n    const rect = this.convertToRectangle(canvas, viewport);\n    const mouseX = event.offsetX - rect.x1;\n    const mouseY = event.offsetY - rect.y1;\n    const width = rect.x2 - rect.x1;\n    const height = rect.y2 - rect.y1;\n    const x = mouseX / width * 2 - 1;\n    const y = -(mouseY / height) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n}\n;// CONCATENATED MODULE: ./esm/convertToInteractiveView.js\n\nfunction convertToClickableMesh(view) {\n  const anyView = view;\n  anyView["interactionHandler"] = new ButtonInteractionHandler({\n    view: anyView\n  });\n  return view;\n}\nfunction convertToCheckboxMesh(view) {\n  const anyView = view;\n  anyView["interactionHandler"] = new CheckBoxInteractionHandler({\n    view: anyView\n  });\n  return view;\n}\nfunction convertToRadioButtonMesh(view) {\n  const anyView = view;\n  anyView["interactionHandler"] = new RadioButtonInteractionHandler({\n    view: anyView\n  });\n  return view;\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_viewport.js\n\n\nconst W = 1280;\nconst H = 900;\nclass SceneSet {\n  bg;\n  viewport;\n  scene;\n  camera;\n  manager;\n  constructor(x, y, w, h, canvas, bg) {\n    this.viewport = new three_module/* Vector4 */.Ltg(x, y, w, h);\n    this.bg = bg;\n    this.scene = new three_module/* Scene */.xsS();\n    this.camera = new three_module/* PerspectiveCamera */.cPb(45, w / h, 1, 400);\n    this.camera.position.set(0, 0, 100);\n    this.scene.add(this.camera);\n\n    //平行光源オブジェクト(light)の設定\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    this.scene.add(ambientLight);\n    this.manager = new MouseEventManager(this.scene, this.camera, canvas, {\n      viewport: this.viewport\n    });\n    testButton(this.scene);\n    testCheckbox(this.scene);\n    testSprite(this.scene);\n    testSelectableSprite(this.scene);\n    testRadio(this.scene);\n  }\n  render(renderer) {\n    renderer.setClearColor(this.bg);\n    renderer.clearDepth(); // important!\n    renderer.setScissorTest(true);\n    renderer.setScissor(this.viewport);\n    renderer.setViewport(this.viewport);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setScissorTest(false);\n  }\n}\nconst onDomContentsLoaded = () => {\n  // シーンを作成\n  const canvas = document.getElementById("webgl-canvas");\n  const renderOption = {\n    canvas\n  };\n  const renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.autoClear = false;\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  const scene1 = new SceneSet(20, 20, 480, 360, canvas, 0x222222);\n  const scene2 = new SceneSet(480, 360, 520, 480, canvas, 0x444444);\n  const render = () => {\n    renderer.setClearColor(0x000000);\n    renderer.clear();\n    scene1.render(renderer);\n    scene2.render(renderer);\n    requestAnimationFrame(render);\n  };\n  render();\n};\n\n/**\n * Mesh用のマテリアルセットを新規に取得する。\n * @returns {StateMaterialSet}\n */\nconst getMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getMeshMaterial(0.6),\n    over: getMeshMaterial(0.8),\n    down: getMeshMaterial(1.0),\n    normalSelect: getMeshMaterial(0.6, 0xffff00),\n    overSelect: getMeshMaterial(0.8, 0xffff00),\n    downSelect: getMeshMaterial(1.0, 0xffff00)\n  });\n};\nconst getMeshMaterial = (opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* MeshBasicMaterial */.vBJ({\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\n\n/**\n * スプライト用のマテリアルセットを新規に生成する。\n */\nconst getSpriteMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getSpriteMaterial("./btn045_01.png", 1.0),\n    over: getSpriteMaterial("./btn045_02.png", 1.0),\n    down: getSpriteMaterial("./btn045_03.png", 1.0),\n    normalSelect: getSpriteMaterial("./btn045_01.png", 0.5),\n    overSelect: getSpriteMaterial("./btn045_02.png", 0.5),\n    downSelect: getSpriteMaterial("./btn045_03.png", 0.5)\n  });\n};\n\n/**\n * スプライト用マテリアルを生成する\n * @param img マップ画像URL\n * @param opacity 透過度\n * @param color カラー\n * @returns {SpriteMaterial}\n */\nconst getSpriteMaterial = (img, opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* SpriteMaterial */.xeV({\n    map: new three_module/* TextureLoader */.dpR().load(img),\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\nconst testButton = scene => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(6, 6, 6);\n  const clickable = new ClickableMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(-10, 20, 0);\n  scene.add(clickable);\n};\nconst testCheckbox = scene => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(6, 6, 6);\n  const clickable = new CheckBoxMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(0, 20, 0);\n  scene.add(clickable);\n};\nconst testSprite = scene => {\n  const clickable = new ClickableSprite(getSpriteMaterialSet());\n  alignSprite(scene, clickable, 10);\n};\nconst testSelectableSprite = scene => {\n  const selectable = new CheckBoxSprite(getSpriteMaterialSet());\n  alignSprite(scene, selectable, 20);\n};\nconst alignSprite = (scene, sprite, x) => {\n  sprite.position.set(x, 20, 0);\n  const scale = 8.0;\n  sprite.scale.set(scale, scale, scale);\n  scene.add(sprite);\n};\nconst testRadio = scene => {\n  const geometry = new three_module/* BoxGeometry */.DvJ(6, 6, 6);\n  const initButton = (x, buttonValue) => {\n    const button = new RadioButtonMesh({\n      geo: geometry,\n      material: getMaterialSet()\n    });\n    button.position.set(x, -10, 0);\n    button.interactionHandler.value = buttonValue;\n    scene.add(button);\n    return button;\n  };\n  const manager = new RadioButtonManager();\n  manager.addButton(initButton(-10, "button01"), initButton(0, Math.PI), initButton(10, {\n    value01: 1,\n    value02: 2\n  }));\n  manager.addButton(initButton(20, undefined));\n  manager.on("select", e => {\n    console.log(e.interactionHandler.value);\n  });\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sR0FBRyxJQUFJcEosa0JBQWtCLENBQUMsQ0FBQztFQUV4Q29KLE9BQU8sQ0FBQy9JLFNBQVMsQ0FDZjJMLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFDM0JBLFVBQVUsQ0FBQyxDQUFDLEVBQUUvSCxJQUFJLENBQUNpSSxFQUFFLENBQUMsRUFDdEJGLFVBQVUsQ0FBQyxFQUFFLEVBQUU7SUFBRUcsT0FBTyxFQUFFLENBQUM7SUFBRUMsT0FBTyxFQUFFO0VBQUUsQ0FBQyxDQUMzQyxDQUFDO0VBQ0RoRCxPQUFPLENBQUMvSSxTQUFTLENBQUMyTCxVQUFVLENBQUMsRUFBRSxFQUFFekYsU0FBUyxDQUFDLENBQUM7RUFFNUM2QyxPQUFPLENBQUN6SSxFQUFFLENBQUMsUUFBUSxFQUFHbkMsQ0FBQyxJQUFLO0lBQzFCZSxPQUFPLENBQUM4TSxHQUFHLENBQUM3TixDQUFDLENBQUM1QyxrQkFBa0IsQ0FBQ3NCLEtBQUssQ0FBQztFQUN6QyxDQUFDLENBQUM7QUFDSixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBK0osTUFBTSxDQUFDcUYsTUFBTSxHQUFHL0IsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS92aWV3L0NsaWNrYWJsZUdyb3VwLmpzP2YzNmYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS92aWV3L0ludGVyYWN0aXZlTWVzaC5qcz83MjdmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vdmlldy9JbnRlcmFjdGl2ZVNwcml0ZS5qcz9mYjI4Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vdmlldy9pbmRleC5qcz9hMTBhIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vaW50ZXJhY3Rpb25IYW5kbGVyL0J1dHRvbkludGVyYWN0aW9uSGFuZGxlci5qcz82NmM4Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vaW50ZXJhY3Rpb25IYW5kbGVyL0NoZWNrQm94SW50ZXJhY3Rpb25IYW5kbGVyLmpzP2Q5MjkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9pbnRlcmFjdGlvbkhhbmRsZXIvUmFkaW9CdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIuanM/ZjMyOSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZXNtL2ludGVyYWN0aW9uSGFuZGxlci9pbmRleC5qcz82NWIzIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vUmFkaW9CdXR0b25NYW5hZ2VyLmpzPzM0ZjYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9TdGF0ZU1hdGVyaWFsLmpzPzVlMTIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9Nb3VzZUV2ZW50TWFuYWdlci5qcz9kOGVlIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vVGhyZWVNb3VzZUV2ZW50LmpzPzVkYzAiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWludGVyYWN0aXZlLW9iamVjdC8uL2VzbS9WaWV3UG9ydFV0aWwuanM/N2QxZSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZXNtL2NvbnZlcnRUb0ludGVyYWN0aXZlVmlldy5qcz80ZDY5Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1pbnRlcmFjdGl2ZS1vYmplY3QvLi9lc20vaW5kZXguanM/YjIzOSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtaW50ZXJhY3RpdmUtb2JqZWN0Ly4vZGVtb1NyYy9kZW1vX3ZpZXdwb3J0LmpzP2RlZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXAgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuZXhwb3J0IGNsYXNzIENsaWNrYWJsZUdyb3VwIGV4dGVuZHMgR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlciA9IG5ldyBCdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgdmlldzogdGhpcyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWVzaCB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgQ2hlY2tCb3hJbnRlcmFjdGlvbkhhbmRsZXIsIEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciwgUmFkaW9CdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIsIH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5jbGFzcyBJbnRlcmFjdGl2ZU1lc2ggZXh0ZW5kcyBNZXNoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzLCBjdG9yKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMuZ2VvKTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIgPSBuZXcgY3Rvcih7XG4gICAgICAgICAgICB2aWV3OiB0aGlzLFxuICAgICAgICAgICAgbWF0ZXJpYWw6IHBhcmFtZXRlcnMubWF0ZXJpYWwsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDbGlja2FibGVNZXNoIGV4dGVuZHMgSW50ZXJhY3RpdmVNZXNoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIChCdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hNZXNoIGV4dGVuZHMgSW50ZXJhY3RpdmVNZXNoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIChDaGVja0JveEludGVyYWN0aW9uSGFuZGxlcikpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbk1lc2ggZXh0ZW5kcyBJbnRlcmFjdGl2ZU1lc2gge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgKFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBDaGVja0JveEludGVyYWN0aW9uSGFuZGxlciwgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyLCBSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlciwgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmNsYXNzIEludGVyYWN0aXZlU3ByaXRlIGV4dGVuZHMgU3ByaXRlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbCwgY3Rvcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlciA9IG5ldyBjdG9yKHsgdmlldzogdGhpcywgbWF0ZXJpYWw6IG1hdGVyaWFsIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDbGlja2FibGVTcHJpdGUgZXh0ZW5kcyBJbnRlcmFjdGl2ZVNwcml0ZSB7XG4gICAgY29uc3RydWN0b3IobWF0ZXJpYWwpIHtcbiAgICAgICAgc3VwZXIobWF0ZXJpYWwsIChCdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hTcHJpdGUgZXh0ZW5kcyBJbnRlcmFjdGl2ZVNwcml0ZSB7XG4gICAgY29uc3RydWN0b3IobWF0ZXJpYWwpIHtcbiAgICAgICAgc3VwZXIobWF0ZXJpYWwsIChDaGVja0JveEludGVyYWN0aW9uSGFuZGxlcikpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvblNwcml0ZSBleHRlbmRzIEludGVyYWN0aXZlU3ByaXRlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbCkge1xuICAgICAgICBzdXBlcihtYXRlcmlhbCwgKFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vQ2xpY2thYmxlR3JvdXAuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0ludGVyYWN0aXZlTWVzaC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vSW50ZXJhY3RpdmVTcHJpdGUuanNcIjtcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcImV2ZW50ZW1pdHRlcjNcIjtcbmltcG9ydCB7IFRocmVlTW91c2VFdmVudFV0aWwsIH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG4vKipcbiAqIFRoZSBgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyYCBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgdGhlIGludGVyYWN0aW9ucyB3aXRoIGJ1dHRvbi1saWtlIG9iamVjdHMuXG4gKiBFYWNoIGJ1dHRvbi1saWtlIG9iamVjdCBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBgQ2xpY2thYmxlTWVzaGAsIGBDbGlja2FibGVTcHJpdGVgLCBvciBgQ2xpY2thYmxlR3JvdXBgLCBhbmQgY2FuIGhhdmUgYW4gYXNzb2NpYXRlZCB2YWx1ZS5cbiAqIFRoZSBgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyYCBjbGFzcyAgaGFuZGxlIHRoZSBpbnRlcmFjdGlvbiBldmVudHMgYW5kIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhlIGJ1dHRvbi1saWtlIG9iamVjdCBhY2NvcmRpbmdseS5cbiAqXG4gKiBUaGUgZ2VuZXJpYyBwYXJhbWV0ZXIgYFZhbHVlYCByZXByZXNlbnRzIHRoZSB0eXBlIG9mIHRoZSBgdmFsdWVgIHByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZ2V0IG1hdGVyaWFsU2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWxTZXQ7XG4gICAgfVxuICAgIHNldCBtYXRlcmlhbFNldCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBpc1NhbWUgPSB2YWx1ZSA9PT0gdGhpcy5fbWF0ZXJpYWxTZXQ7XG4gICAgICAgIHRoaXMuX21hdGVyaWFsU2V0ID0gdmFsdWU7XG4gICAgICAgIGlmICghaXNTYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzT3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3ZlcjtcbiAgICB9XG4gICAgZ2V0IGlzUHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ByZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2lzUHJlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNPdmVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VuYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMubW91c2VFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mcm96ZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFwibm9ybWFsXCI7XG4gICAgICAgIHRoaXMuX2FscGhhID0gMS4wO1xuICAgICAgICB0aGlzLnZpZXcgPSBwYXJhbWV0ZXJzLnZpZXc7XG4gICAgICAgIHRoaXMuX21hdGVyaWFsU2V0ID8/PSBwYXJhbWV0ZXJzLm1hdGVyaWFsO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxuICAgIG9uTW91c2VEb3duSGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tBY3Rpdml0eSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1ByZXNzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShcImRvd25cIik7XG4gICAgICAgIHRoaXMuZW1pdChldmVudC50eXBlLCBldmVudCk7XG4gICAgfVxuICAgIG9uTW91c2VVcEhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrQWN0aXZpdHkoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFByZXNzID0gdGhpcy5faXNQcmVzcztcbiAgICAgICAgdGhpcy5faXNQcmVzcyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSB0aGlzLl9pc092ZXIgPyBcIm92ZXJcIiA6IFwibm9ybWFsXCI7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUobmV4dFN0YXRlKTtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LnR5cGUsIGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2lzUHJlc3MgIT0gY3VycmVudFByZXNzKSB7XG4gICAgICAgICAgICB0aGlzLm9uTW91c2VDbGljaygpO1xuICAgICAgICAgICAgY29uc3QgZSA9IFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUoXCJjbGlja1wiLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChlLnR5cGUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbk1vdXNlQ2xpY2soKSB7IH1cbiAgICBvbk1vdXNlT3ZlckhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbk1vdXNlT3Zlck91dEhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgICBvbk1vdXNlT3V0SGFuZGxlcihldmVudCkge1xuICAgICAgICB0aGlzLm9uTW91c2VPdmVyT3V0SGFuZGxlcihldmVudCk7XG4gICAgfVxuICAgIG9uTW91c2VPdmVyT3V0SGFuZGxlcihldmVudCkge1xuICAgICAgICB0aGlzLl9pc092ZXIgPSBldmVudC50eXBlID09PSBcIm92ZXJcIjsgLy/jg57jgqbjgrnjgqrjg7zjg5Djg7zjga7liKTlrprjga9kaXNhYmxl54q25oWL44Gn44KC6KGM44GG44CCXG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUodGhpcy5faXNPdmVyID8gXCJvdmVyXCIgOiBcIm5vcm1hbFwiKTtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LnR5cGUsIGV2ZW50KTtcbiAgICB9XG4gICAgc2V0IGFscGhhKG51bWJlcikge1xuICAgICAgICB0aGlzLl9hbHBoYSA9IG51bWJlcjtcbiAgICAgICAgdGhpcy51cGRhdGVNYXRlcmlhbCgpO1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZShzdGF0ZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu44Oc44K/44Oz44Gu5pyJ5Yq544CB54Sh5Yq554q25oWL44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiAgICDjg5zjgr/jg7PjgYzmnInlirnjgYvlkKbjgYtcbiAgICAgKi9cbiAgICBjaGVja0FjdGl2aXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlICYmICF0aGlzLmZyb3plbjtcbiAgICB9XG4gICAgZW5hYmxlKCkge1xuICAgICAgICB0aGlzLnN3aXRjaEVuYWJsZSh0cnVlKTtcbiAgICB9XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hFbmFibGUoZmFsc2UpO1xuICAgIH1cbiAgICB1cGRhdGVNYXRlcmlhbCgpIHtcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxTZXQ/LnNldE9wYWNpdHkodGhpcy5fYWxwaGEpO1xuICAgICAgICBjb25zdCBzdGF0ZU1hdCA9IHRoaXMuX21hdGVyaWFsU2V0Py5nZXRNYXRlcmlhbCh0aGlzLnN0YXRlLCB0aGlzLl9lbmFibGUpO1xuICAgICAgICBpZiAoIXN0YXRlTWF0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudmlldy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiTWVzaFwiOlxuICAgICAgICAgICAgY2FzZSBcIlNwcml0ZVwiOlxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5tYXRlcmlhbCA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlTWF0Lm1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkdyb3VwXCI6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaEVuYWJsZShib29sKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZSA9IGJvb2w7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBib29sID8gXCJub3JtYWxcIiA6IFwiZGlzYWJsZVwiO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyIGluc3RlYWQuIFRoaXMgY2xhc3Mgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWlub3IgdmVyc2lvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENsaWNrYWJsZU9iamVjdCBleHRlbmRzIEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGlzIGNsYXNzIGlzIGRlcHJlY2F0ZWQuIFVzZSBCdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIgaW5zdGVhZC5cIik7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRocmVlTW91c2VFdmVudFV0aWwgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciwgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuLyoqXG4gKiBUaGUgYENoZWNrQm94SW50ZXJhY3Rpb25IYW5kbGVyYCBjbGFzcyBleHRlbmRzIHRoZSBgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyYCBjbGFzcyB0byBtYW5hZ2UgaW50ZXJhY3Rpb25zIHdpdGggY2hlY2tib3gtbGlrZSBvYmplY3RzLlxuICogSW4gYWRkaXRpb24gdG8gaGFuZGxpbmcgaW50ZXJhY3Rpb24gZXZlbnRzLCB0aGlzIGNsYXNzIGFsc28gbWFpbnRhaW5zIHRoZSBzZWxlY3Rpb24gc3RhdGUgb2YgdGhlIGNoZWNrYm94LWxpa2Ugb2JqZWN0LlxuICpcbiAqIFRoZSBnZW5lcmljIHBhcmFtZXRlciBgVmFsdWVgIHJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIGB2YWx1ZWAgcHJvcGVydHkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY2hlY2tib3guXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGVja0JveEludGVyYWN0aW9uSGFuZGxlciBleHRlbmRzIEJ1dHRvbkludGVyYWN0aW9uSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2lzU2VsZWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCr+ODquODg+OCr+OCpOODmeODs+ODiOaZguOBruWHpueQhlxuICAgICAqIFwiY2xpY2tcIuOCpOODmeODs+ODiOOBr+ODnuOCpuOCueOCpOODmeODs+ODiOmhnuOBruW/heOBmuacgOW+jOOBq+eZuueUn+OBmeOCi+OBruOBp1xuICAgICAqIOOBk+OBk+OBp2lzU2VsZWN054q25oWL44KS5LiA5ous566h55CG44GZ44KL44CCXG4gICAgICovXG4gICAgb25Nb3VzZUNsaWNrKCkge1xuICAgICAgICB0aGlzLl9pc1NlbGVjdCA9ICF0aGlzLl9pc1NlbGVjdDtcbiAgICAgICAgY29uc3QgZSA9IFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUoXCJzZWxlY3RcIiwgdGhpcyk7XG4gICAgICAgIHRoaXMuZW1pdChlLnR5cGUsIGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKCk7XG4gICAgfVxuICAgIGdldCBzZWxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NlbGVjdDtcbiAgICB9XG4gICAgc2V0IHNlbGVjdGlvbihib29sKSB7XG4gICAgICAgIHRoaXMuX2lzU2VsZWN0ID0gYm9vbDtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShcIm5vcm1hbFwiKTtcbiAgICB9XG4gICAgdXBkYXRlTWF0ZXJpYWwoKSB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxTZXQ/LnNldE9wYWNpdHkodGhpcy5fYWxwaGEpO1xuICAgICAgICBjb25zdCBzdGF0ZU1hdCA9IHRoaXMubWF0ZXJpYWxTZXQ/LmdldE1hdGVyaWFsKHRoaXMuc3RhdGUsIHRoaXMuX2VuYWJsZSwgdGhpcy5faXNTZWxlY3QpO1xuICAgICAgICBpZiAoc3RhdGVNYXQ/Lm1hdGVyaWFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5tYXRlcmlhbCA9IHN0YXRlTWF0Lm1hdGVyaWFsO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgQ2hlY2tCb3hJbnRlcmFjdGlvbkhhbmRsZXIgaW5zdGVhZC4gVGhpcyBjbGFzcyB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtaW5vciB2ZXJzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hPYmplY3QgZXh0ZW5kcyBDaGVja0JveEludGVyYWN0aW9uSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGlzIGNsYXNzIGlzIGRlcHJlY2F0ZWQuIFVzZSBDaGVja0JveEludGVyYWN0aW9uSGFuZGxlciBpbnN0ZWFkLlwiKTtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2hlY2tCb3hJbnRlcmFjdGlvbkhhbmRsZXIsIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlciBleHRlbmRzIENoZWNrQm94SW50ZXJhY3Rpb25IYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5faXNGcm96ZW4gPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu44Oc44K/44Oz44Gu5pyJ5Yq544CB54Sh5Yq554q25oWL44KS5Y+W5b6X44GZ44KLXG4gICAgICog44Op44K444Kq44Oc44K/44Oz44Gv6YG45oqe5Lit44Gv6Ieq6Lqr44Gu54q25oWL44KS5aSJ5pu044Gn44GN44Gq44GE44CCXG4gICAgICogQHJldHVybiAgICDjg5zjgr/jg7PjgYzmnInlirnjgYvlkKbjgYtcbiAgICAgKi9cbiAgICBjaGVja0FjdGl2aXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlICYmICF0aGlzLl9pc0Zyb3plbjtcbiAgICB9XG4gICAgZ2V0IGlzRnJvemVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGcm96ZW47XG4gICAgfVxuICAgIHNldCBpc0Zyb3plbihib29sKSB7XG4gICAgICAgIHRoaXMuX2lzRnJvemVuID0gYm9vbDtcbiAgICB9XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlciBpbnN0ZWFkLiBUaGlzIGNsYXNzIHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1pbm9yIHZlcnNpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbk9iamVjdCBleHRlbmRzIFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoaXMgY2xhc3MgaXMgZGVwcmVjYXRlZC4gVXNlIFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyIGluc3RlYWQuXCIpO1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9CdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NoZWNrQm94SW50ZXJhY3Rpb25IYW5kbGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlci5qc1wiO1xuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRlbWl0dGVyM1wiO1xuaW1wb3J0IHsgVGhyZWVNb3VzZUV2ZW50VXRpbCwgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuZXhwb3J0IGNsYXNzIFJhZGlvQnV0dG9uTWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgZPjga7jg57jg43jg7zjgrjjg6Pjg7zjga7nrqHnkIbkuIvjga7jg5zjgr/jg7NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2ludGVyYWN0aW9uSGFuZGxlcnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOeuoeeQhuS4i+OBruODnOOCv+ODs+OBjOmBuOaKnuOBleOCjOOBn+WgtOWQiOOBruWHpueQhlxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uU2VsZWN0ZWRCdXR0b24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KGUuaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44GT44Gu44Oe44ON44O844K444Oj44O844Gu566h55CG5LiL44Gr44Oc44K/44Oz44KS6L+95Yqg44GZ44KLXG4gICAgICogQHBhcmFtIHtJQ2xpY2thYmxlT2JqZWN0M0RbXX0gYnV0dG9uc1xuICAgICAqL1xuICAgIGFkZEJ1dHRvbiguLi5idXR0b25zKSB7XG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZEludGVyYWN0aW9uSGFuZGxlcihidG4uaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZEludGVyYWN0aW9uSGFuZGxlcihpbnRlcmFjdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5faW50ZXJhY3Rpb25IYW5kbGVycy5wdXNoKGludGVyYWN0aW9uSGFuZGxlcik7XG4gICAgICAgIGludGVyYWN0aW9uSGFuZGxlci5vbihcInNlbGVjdFwiLCB0aGlzLm9uU2VsZWN0ZWRCdXR0b24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PjgpLnrqHnkIbkuIvjgYvjgonlpJbjgZnjgIJcbiAgICAgKiDjg5zjgr/jg7Poh6rkvZPjga7liYrpmaTjga/ooYzjgo/jgarjgYTjgIJcbiAgICAgKiBAcGFyYW0ge0lDbGlja2FibGVPYmplY3QzRH0gYnV0dG9uXG4gICAgICovXG4gICAgcmVtb3ZlQnV0dG9uKGJ1dHRvbikge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYWN0aW9uSGFuZGxlcihidXR0b24uaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICB9XG4gICAgcmVtb3ZlSW50ZXJhY3Rpb25IYW5kbGVyKGludGVyYWN0aW9uSGFuZGxlcikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2ludGVyYWN0aW9uSGFuZGxlcnMuaW5kZXhPZihpbnRlcmFjdGlvbkhhbmRsZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJhY3Rpb25IYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgaW50ZXJhY3Rpb25IYW5kbGVyLm9mZihcInNlbGVjdFwiLCB0aGlzLm9uU2VsZWN0ZWRCdXR0b24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcmFjdGlvbkhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOeJueWumuOBruODnOOCv+ODs+OCkumBuOaKnuOBmeOCi1xuICAgICAqIEBwYXJhbSB7UmFkaW9CdXR0b25JbnRlcmFjdGlvbkhhbmRsZXJ9IGludGVyYWN0aW9uSGFuZGxlclxuICAgICAqL1xuICAgIHNlbGVjdChpbnRlcmFjdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9pbnRlcmFjdGlvbkhhbmRsZXJzLmluZGV4T2YoaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi566h55CG5LiL44Gn44Gq44GE44Oc44K/44Oz44GM6YG45oqe5Yem55CG44GV44KM44G+44GX44Gf44CCXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8v6YG45oqe5riI44G/44Gu44Oc44K/44Oz44KS5YaN5bqm5rih44GV44KM44Gm44KC5Y+N5b+c44GX44Gq44GE44CCXG4gICAgICAgIGlmIChpbnRlcmFjdGlvbkhhbmRsZXIgPT09IHRoaXMuX3NlbGVjdGVkICYmIGludGVyYWN0aW9uSGFuZGxlci5pc0Zyb3plbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkID0gaW50ZXJhY3Rpb25IYW5kbGVyO1xuICAgICAgICBmb3IgKGxldCBtZGwgb2YgdGhpcy5faW50ZXJhY3Rpb25IYW5kbGVycykge1xuICAgICAgICAgICAgbWRsLnNlbGVjdGlvbiA9IG1kbC5pc0Zyb3plbiA9IG1kbCA9PT0gaW50ZXJhY3Rpb25IYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2dCA9IFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUoXCJzZWxlY3RcIiwgaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5lbWl0KGV2dC50eXBlLCBldnQpO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgICB9XG4gICAgZ2V0IGludGVyYWN0aW9uSGFuZGxlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcmFjdGlvbkhhbmRsZXJzO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBTdGF0ZU1hdGVyaWFsIHtcbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLmFscGhhID0gMS4wO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgfVxuICAgIHVwZGF0ZUFscGhhKCkge1xuICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdGhpcy5hbHBoYUFycmF5ID0gdGhpcy5nZXRBbHBoYUFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFscGhhID0gdGhpcy5fbWF0ZXJpYWwub3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRBbHBoYUFycmF5KCkge1xuICAgICAgICBjb25zdCBtYXRBcnJheSA9IHRoaXMuX21hdGVyaWFsO1xuICAgICAgICBjb25zdCBuID0gbWF0QXJyYXkubGVuZ3RoO1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgYXJyYXkucHVzaChtYXRBcnJheVtpXS5vcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHNldCBtYXRlcmlhbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnVwZGF0ZUFscGhhKCk7XG4gICAgfVxuICAgIGdldCBtYXRlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFsO1xuICAgIH1cbiAgICBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9tYXRlcmlhbC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5fbWF0ZXJpYWxbaV07XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IG9wYWNpdHkgKiB0aGlzLmFscGhhQXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eSAqIHRoaXMuYWxwaGE7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RhdGVNYXRlcmlhbFNldCB7XG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBbXTtcbiAgICAgICAgdGhpcy5ub3JtYWwgPSBuZXcgU3RhdGVNYXRlcmlhbChwYXJhbS5ub3JtYWwpO1xuICAgICAgICB0aGlzLm92ZXIgPSBTdGF0ZU1hdGVyaWFsU2V0LmluaXRNYXRlcmlhbChwYXJhbS5vdmVyLCB0aGlzLm5vcm1hbCk7XG4gICAgICAgIHRoaXMuZG93biA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLmRvd24sIHRoaXMubm9ybWFsKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlID0gU3RhdGVNYXRlcmlhbFNldC5pbml0TWF0ZXJpYWwocGFyYW0uZGlzYWJsZSwgdGhpcy5ub3JtYWwpO1xuICAgICAgICB0aGlzLm5vcm1hbFNlbGVjdCA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLm5vcm1hbFNlbGVjdCwgdGhpcy5ub3JtYWwpO1xuICAgICAgICB0aGlzLm92ZXJTZWxlY3QgPSBTdGF0ZU1hdGVyaWFsU2V0LmluaXRNYXRlcmlhbChwYXJhbS5vdmVyU2VsZWN0LCB0aGlzLm5vcm1hbCk7XG4gICAgICAgIHRoaXMuZG93blNlbGVjdCA9IFN0YXRlTWF0ZXJpYWxTZXQuaW5pdE1hdGVyaWFsKHBhcmFtLmRvd25TZWxlY3QsIHRoaXMubm9ybWFsKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbml0TWF0ZXJpYWwodmFsdWUsIGRlZmF1bHRNYXRlcmlhbCkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0TWF0ZXJpYWw7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdGVNYXRlcmlhbCh2YWx1ZSk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vcm1hbCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLpgJrluLjnirbmhYvjga7jg57jg4bjg6rjgqLjg6vjgYzmjIflrprjgZXjgozjgabjgYTjgb7jgZvjgpPjgIJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBbXG4gICAgICAgICAgICB0aGlzLm5vcm1hbCxcbiAgICAgICAgICAgIHRoaXMubm9ybWFsU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5vdmVyLFxuICAgICAgICAgICAgdGhpcy5vdmVyU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5kb3duLFxuICAgICAgICAgICAgdGhpcy5kb3duU2VsZWN0LFxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXRNYXRlcmlhbChzdGF0ZSwgbW91c2VFbmFibGVkLCBpc1NlbGVjdGVkID0gZmFsc2UpIHtcbiAgICAgICAgLy/nhKHlirnnirbmhYvjga9zdGF0ZeOCiOOCiuOCguWEquWFiFxuICAgICAgICBpZiAoIW1vdXNlRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwibm9ybWFsXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyB0aGlzLm5vcm1hbFNlbGVjdCA6IHRoaXMubm9ybWFsO1xuICAgICAgICAgICAgY2FzZSBcImRvd25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTZWxlY3RlZCA/IHRoaXMuZG93blNlbGVjdCA6IHRoaXMuZG93bjtcbiAgICAgICAgICAgIGNhc2UgXCJvdmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyB0aGlzLm92ZXJTZWxlY3QgOiB0aGlzLm92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICAgIH1cbiAgICBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMuZm9yRWFjaCgobWF0KSA9PiB7XG4gICAgICAgICAgICBtYXQuc2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUkFGVGlja2VyIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IHsgUmF5Y2FzdGVyLCBWZWN0b3IyLCB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgVGhyZWVNb3VzZUV2ZW50VXRpbCwgVmlld1BvcnRVdGlsLCB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5leHBvcnQgY2xhc3MgTW91c2VFdmVudE1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIGNhbWVyYVxuICAgICAqIEBwYXJhbSBjYW52YXNcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIGNhbWVyYSwgY2FudmFzLCBvcHRpb24pIHtcbiAgICAgICAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgUmF5Y2FzdGVyKCk7XG4gICAgICAgIHRoaXMubW91c2UgPSBuZXcgVmVjdG9yMigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRPdmVyID0gW107XG4gICAgICAgIHRoaXMuaGFzVGhyb3R0bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGhyb3R0bGluZ0RlbHRhID0gMDtcbiAgICAgICAgdGhpcy5vblRpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsaW5nRGVsdGEgKz0gTWF0aC5tYXgoZS5kZWx0YSwgMCk7IC8v57WM6YGO5pmC6ZaT44GM44Oe44Kk44OK44K544Gr44Gq44KL44GT44Go44Gv44GC44KK44GI44Gq44GE44Gu44Gn44CBMOacqua6gOOBruWgtOWQiOOBrzDjgpLjgrvjg4Pjg4jjgZnjgovjgIJcbiAgICAgICAgICAgIGlmICh0aGlzLnRocm90dGxpbmdEZWx0YSA8IHRoaXMudGhyb3R0bGluZ1RpbWVfbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhhc1Rocm90dGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsaW5nRGVsdGEgJT0gdGhpcy50aHJvdHRsaW5nVGltZV9tcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNUaHJvdHRsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5oYXNUaHJvdHRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLmdldEludGVyc2VjdHMoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhck92ZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiZWZvcmVPdmVyID0gdGhpcy5jdXJyZW50T3ZlcjtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE92ZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGludGVyc2VjdCBvZiBpbnRlcnNlY3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHRoaXMuY2hlY2tUYXJnZXQoaW50ZXJzZWN0Lm9iamVjdCwgXCJvdmVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJlZm9yZU92ZXI/LmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50T3Zlci5pbmNsdWRlcyhidG4pKSB7XG4gICAgICAgICAgICAgICAgICAgIE1vdXNlRXZlbnRNYW5hZ2VyLm9uQnV0dG9uSGFuZGxlcihidG4sIFwib3V0XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44Kr44Oz44OQ44K55LiK44Gn44Oe44Km44K544OA44Km44Oz44GL44Oe44Km44K544Ki44OD44OX44GM6KGM44KP44KM44Gf6Zqb44Gu44Kk44OZ44Oz44OI44OP44Oz44OJ44Op44O8XG4gICAgICAgICAqIOODnuOCpuOCueW6p+aomeOBi+OCieWvvuixoeOBqOOBquOCi09iamVjdDNE44KS5o6i44GX5Ye644GX44Gm5pON5L2c44KS6KGM44GG44CCXG4gICAgICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25Eb2N1bWVudE1vdXNlVXBEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRUeXBlID0gXCJkb3duXCI7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gXCJkb3duXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gXCJ1cFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghVmlld1BvcnRVdGlsLmlzQ29udGFpbih0aGlzLmNhbnZhcywgdGhpcy52aWV3cG9ydCwgZXZlbnQpICYmXG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlID09PSBcImRvd25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5nZXRJbnRlcnNlY3RzKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJbnRlcnNlY3RzKGludGVyc2VjdHMsIGV2ZW50VHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMudGhyb3R0bGluZ1RpbWVfbXMgPSBvcHRpb24/LnRocm90dGxpbmdUaW1lX21zID8/IDMzO1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gb3B0aW9uPy52aWV3cG9ydDtcbiAgICAgICAgdGhpcy5yZWN1cnNpdmUgPSBvcHRpb24/LnJlY3Vyc2l2ZSA/PyB0cnVlO1xuICAgICAgICB0aGlzLnRhcmdldHMgPSBvcHRpb24/LnRhcmdldHMgPz8gdGhpcy5zY2VuZS5jaGlsZHJlbjtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vbkRvY3VtZW50TW91c2VVcERvd24sIGZhbHNlKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5vbkRvY3VtZW50TW91c2VVcERvd24sIGZhbHNlKTtcbiAgICAgICAgUkFGVGlja2VyLm9uKFwidGlja1wiLCB0aGlzLm9uVGljayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOODnuOCpuOCueOCquODvOODkOODvOOBl+OBpuOBhOOCi+WvvuixoeOCkuOBquOBl+OBq+OBmeOCi+OAglxuICAgICAqIOOCguOBl+OAgeOBmeOBp+OBq+ODnuOCpuOCueOCquODvOODkOODvOWvvuixoeOBjOWtmOWcqOOBmeOCi+OBquOCieOAgeODnuOCpuOCueOCouOCpuODiOODj+ODs+ODieODqeODvOOCkuWRvOOBs+WHuuOBl+OBn+W+jOOBq+OCr+ODquOCouOBmeOCi+OAglxuICAgICAqL1xuICAgIGNsZWFyT3ZlcigpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50T3Zlcj8uZm9yRWFjaCgob3ZlcikgPT4ge1xuICAgICAgICAgICAgTW91c2VFdmVudE1hbmFnZXIub25CdXR0b25IYW5kbGVyKG92ZXIsIFwib3V0XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jdXJyZW50T3ZlciA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg57jgqbjgrnjga7luqfmqJnjgavjgYvjgYvjgaPjgabjgYTjgovjgqrjg5bjgrjjgqfjgq/jg4jkuIDopqfjgYvjgonjgIHmk43kvZzlr77osaHjgpLmpJzntKLjgZdcbiAgICAgKiDmjIflrprjgZXjgozjgZ/jgr/jgqTjg5fjga7jg4/jg7Pjg4njg6njg7zplqLmlbDjgpLlrp/ooYzjgZXjgZvjgovjgIJcbiAgICAgKiDph43jgarjgorlkIjjgaPjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgYzjgYLjgovloLTlkIjjgIHmnIDliY3pnaLjgYvjgonmpJzntKLjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKiDmk43kvZzlr77osaHjgYzopovjgaTjgYvjgaPjgZ/mmYLngrnjgaflh6bnkIbjga/kuK3mlq3jgZXjgozjgIHog4zpnaLjgqrjg5bjgrjjgqfjgq/jg4jjga/mk43kvZzlr77osaHjgavjgarjgonjgarjgYTjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SW50ZXJzZWN0aW9uW119IGludGVyc2VjdHNcbiAgICAgKiBAcGFyYW0ge2tleW9mIFRocmVlTW91c2VFdmVudE1hcH0gdHlwZVxuICAgICAqL1xuICAgIGNoZWNrSW50ZXJzZWN0cyhpbnRlcnNlY3RzLCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IG4gPSBpbnRlcnNlY3RzLmxlbmd0aDtcbiAgICAgICAgaWYgKG4gPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gdGhpcy5jaGVja1RhcmdldChpbnRlcnNlY3RzW2ldLm9iamVjdCwgdHlwZSk7XG4gICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnOOCv+ODs+OBruWQhOeoruOCpOODmeODs+ODiOODj+ODs+ODieODqeODvOODoeOCveODg+ODieOCkuOAgXR5cGXjgavjgZfjgZ/jgYzjgaPjgablrp/ooYzjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0ge0lDbGlja2FibGVPYmplY3QzRH0gYnRuXG4gICAgICogQHBhcmFtIHtrZXlvZiBUaHJlZU1vdXNlRXZlbnRNYXB9IHR5cGVcbiAgICAgKi9cbiAgICBzdGF0aWMgb25CdXR0b25IYW5kbGVyKGJ0biwgdHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgICAgICAgICAgYnRuLmludGVyYWN0aW9uSGFuZGxlci5vbk1vdXNlRG93bkhhbmRsZXIoVGhyZWVNb3VzZUV2ZW50VXRpbC5nZW5lcmF0ZSh0eXBlLCBidG4pKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgICAgICAgICBidG4uaW50ZXJhY3Rpb25IYW5kbGVyLm9uTW91c2VVcEhhbmRsZXIoVGhyZWVNb3VzZUV2ZW50VXRpbC5nZW5lcmF0ZSh0eXBlLCBidG4pKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwib3ZlclwiOlxuICAgICAgICAgICAgICAgIGlmICghYnRuLmludGVyYWN0aW9uSGFuZGxlci5pc092ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnRuLmludGVyYWN0aW9uSGFuZGxlci5vbk1vdXNlT3ZlckhhbmRsZXIoVGhyZWVNb3VzZUV2ZW50VXRpbC5nZW5lcmF0ZSh0eXBlLCBidG4pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcIm91dFwiOlxuICAgICAgICAgICAgICAgIGlmIChidG4uaW50ZXJhY3Rpb25IYW5kbGVyLmlzT3Zlcikge1xuICAgICAgICAgICAgICAgICAgICBidG4uaW50ZXJhY3Rpb25IYW5kbGVyLm9uTW91c2VPdXRIYW5kbGVyKFRocmVlTW91c2VFdmVudFV0aWwuZ2VuZXJhdGUodHlwZSwgYnRuKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJQ2xpY2thYmxlT2JqZWN0M0TjgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrnjgpLlrp/oo4XjgZfjgabjgYTjgovjgYvlkKbjgYvjgpLliKTlrprjgZnjgovjgIJcbiAgICAgKiDjg6bjg7zjgrbjg7zlrprnvqlUeXBlIEd1YXJkXG4gICAgICogQHBhcmFtIGFyZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3RhdGljIGltcGxlbWVudHNJQ2xpY2thYmxlT2JqZWN0M0QoYXJnKSB7XG4gICAgICAgIHJldHVybiAoYXJnICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBhcmcuaW50ZXJhY3Rpb25IYW5kbGVyICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnLmludGVyYWN0aW9uSGFuZGxlciA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgYXJnLmludGVyYWN0aW9uSGFuZGxlci5tb3VzZUVuYWJsZWQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBhcmcuaW50ZXJhY3Rpb25IYW5kbGVyLm1vdXNlRW5hYmxlZCA9PT0gXCJib29sZWFuXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDpnZ7mjqjlpajjgavjgarjgaPjgZ9JQ2xpY2thYmxlT2JqZWN0M0TjgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrnjga5tb2RlbOODl+ODreODkeODhuOCo+OCkuWun+ijheOBl+OBpuOBhOOCi+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBhcmdcbiAgICAgKi9cbiAgICBzdGF0aWMgaW1wbGVtZW50c0RlcGFydGVkSUNsaWNrYWJsZU9iamVjdDNEKGFyZykge1xuICAgICAgICByZXR1cm4gKGFyZyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgYXJnLm1vZGVsICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnLm1vZGVsID09PSBcIm9iamVjdFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5oyH5a6a44GV44KM44GfdGFyZ2V044Kq44OW44K444Kn44Kv44OI44GL44KJ6Kaq5pa55ZCR44Gr44CB44Kv44Oq44OD44Kr44OW44Or44Kk44Oz44K/44O844OV44Kn44O844K544KS57aZ5om/44GX44Gm44GE44KL44Kq44OW44K444Kn44Kv44OI44KS5qSc57Si44GZ44KL44CCXG4gICAgICog44Kq44OW44K444Kn44Kv44OI44KS55m66KaL44GX44Gf5aC05ZCI44GvdHJ1ZeOCkuOAgeeZuuimi+OBp+OBjeOBquOBhOWgtOWQiOOBr2ZhbHNl44KS6L+U44GZ44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcGFyYW0gaGFzVGFyZ2V0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNoZWNrVGFyZ2V0KHRhcmdldCwgdHlwZSwgaGFzVGFyZ2V0ID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKE1vdXNlRXZlbnRNYW5hZ2VyLmltcGxlbWVudHNEZXBhcnRlZElDbGlja2FibGVPYmplY3QzRCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkOiBJQ2xpY2thYmxlT2JqZWN0M0QubW9kZWwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBJQ2xpY2thYmxlT2JqZWN0M0QuaW50ZXJhY3Rpb25IYW5kbGVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvL+OCr+ODquODg+OCq+ODluODq+OCpOODs+OCv+ODvOODleOCp+ODvOOCueOCkue2meaJv+OBl+OBpuOBhOOCi+OBquOCieWIpOWumk9LXG4gICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgTW91c2VFdmVudE1hbmFnZXIuaW1wbGVtZW50c0lDbGlja2FibGVPYmplY3QzRCh0YXJnZXQpICYmXG4gICAgICAgICAgICB0YXJnZXQuaW50ZXJhY3Rpb25IYW5kbGVyLm1vdXNlRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwib3ZlclwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3Zlci5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNb3VzZUV2ZW50TWFuYWdlci5vbkJ1dHRvbkhhbmRsZXIodGFyZ2V0LCB0eXBlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVGFyZ2V0KHRhcmdldC5wYXJlbnQsIHR5cGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8v57aZ5om/44GX44Gm44GE44Gq44GE44Gq44KJ44Gd44Gu6Kaq44KS5o6i57Si57aZ57aa44CCXG4gICAgICAgIC8v44K/44O844Ky44OD44OI44GL44KJ5LiK5piH44GX44Gm5o6i44GZ44CCXG4gICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudCAhPSBudWxsICYmXG4gICAgICAgICAgICB0YXJnZXQucGFyZW50LnR5cGUgIT09IFwiU2NlbmVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tUYXJnZXQodGFyZ2V0LnBhcmVudCwgdHlwZSwgaGFzVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvL+imquOBjOOCt+ODvOODs+OBruWgtOWQiOOBr+aOoue0oue1guS6huOAglxuICAgICAgICByZXR1cm4gaGFzVGFyZ2V0O1xuICAgIH1cbiAgICBnZXRJbnRlcnNlY3RzKGV2ZW50KSB7XG4gICAgICAgIFZpZXdQb3J0VXRpbC5jb252ZXJ0VG9Nb3VzZVBvc2l0aW9uKHRoaXMuY2FudmFzLCBldmVudCwgdGhpcy52aWV3cG9ydCwgdGhpcy5tb3VzZSk7XG4gICAgICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5tb3VzZSwgdGhpcy5jYW1lcmEpO1xuICAgICAgICByZXR1cm4gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRhcmdldHMsIHRoaXMucmVjdXJzaXZlKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgVGhyZWVNb3VzZUV2ZW50VXRpbCB7XG4gICAgc3RhdGljIGdlbmVyYXRlKHR5cGUsIGhhbmRsZXJPclZpZXcpIHtcbiAgICAgICAgY29uc3QgaW50ZXJhY3Rpb25IYW5kbGVyID0gVGhyZWVNb3VzZUV2ZW50VXRpbC5nZXRJbnRlcmFjdGlvbkhhbmRsZXIoaGFuZGxlck9yVmlldyk7XG4gICAgICAgIGNvbnN0IGdldFNlbGVjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRocmVlTW91c2VFdmVudFV0aWwuZ2V0U2VsZWN0aW9uKGludGVyYWN0aW9uSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGludGVyYWN0aW9uSGFuZGxlcixcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGdldFNlbGVjdGlvbigpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW50ZXJhY3Rpb25IYW5kbGVyKGhhbmRsZXJPclZpZXcpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJPclZpZXcgIT0gbnVsbCAmJiBcImludGVyYWN0aW9uSGFuZGxlclwiIGluIGhhbmRsZXJPclZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyT3JWaWV3LmludGVyYWN0aW9uSGFuZGxlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFuZGxlck9yVmlldztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU0VMRUNU44Kk44OZ44Oz44OI44Gu5aC05ZCI44Gv44CB5a++6LGh44Oc44K/44Oz44Gu6YG45oqe54q25oWL44KS5Y+W5b6XXG4gICAgICogQHBhcmFtIGludGVyYWN0aW9uSGFuZGxlclxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTZWxlY3Rpb24oaW50ZXJhY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbkhhbmRsZXIgIT0gbnVsbCAmJiBcInNlbGVjdGlvblwiIGluIGludGVyYWN0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgcmV0dXJuICEhaW50ZXJhY3Rpb25IYW5kbGVyW1wic2VsZWN0aW9uXCJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6YG45oqe5Y+v6IO944Gq44Oc44K/44Oz5Lul5aSW44KS5byV5pWw44Gr44GX44Gm44CBU0VMRUNU44Kk44OZ44Oz44OI44KS44Kk44Oz44K544K/44Oz44K55YyW44GX44G+44GX44Gf44CCU0VMRUNU44Kk44OZ44Oz44OI44GvSVNlbGVjdGFibGVPYmplY3QzROOCkuWun+ijheOBl+OBn+OCr+ODqeOCueOBqOOBqOOCguOBq+OCpOODs+OCueOCv+ODs+OCueWMluOBl+OBpuOBj+OBoOOBleOBhOOAglwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY2xvbmUoZSkge1xuICAgICAgICByZXR1cm4gVGhyZWVNb3VzZUV2ZW50VXRpbC5nZW5lcmF0ZShlLnR5cGUsIGUuaW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIFZpZXdQb3J055+p5b2i44Gr6Zai44GZ44KL5Yem55CG44KS5Y+X44GR5oyB44Gk44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3UG9ydFV0aWwge1xuICAgIC8qKlxuICAgICAqIGNhbnZhc+OBrumrmOOBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogdGhyZWUuanPjga5XZWJHTFJlbmRlcmVy44Gv44CBZGV2aWNlUGl4ZWxSYXRpb+OBq+OBguOCj+OBm+OBpmNhbnZhcy5oZWlnaHTjgpLlpInmm7TjgZnjgovjgIJcbiAgICAgKiDjg5bjg6njgqbjgrbjga7mi6HlpKfnuK7lsI/jgpLooYzjgYbjgajjgIFkZXZpY2VQaXhlbFJhdGlv44GM5aSJ5pu044GV44KM44KL44Gf44KBY2FudmFzLmhlaWdodOOCkuWPluW+l+OBp+OBjeOBquOBhOOAglxuICAgICAqIOOBneOBruOBn+OCgeOBvuOBmnN0eWxl44GL44KJ6auY44GV44KS5Y+W5b6X44GX44CBc3R5bGXjgYzjgarjgYTloLTlkIjjga9kZXZpY2VQaXhlbFJhdGlv44KS5Yqg5ZGz44GX44Gf6auY44GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FudmFzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2FudmFzSGVpZ2h0KGNhbnZhcykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDYW52YXNTaXplKGNhbnZhcywgXCJoZWlnaHRcIik7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDYW52YXNXaWR0aChjYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzU2l6ZShjYW52YXMsIFwid2lkdGhcIik7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDYW52YXNTaXplKGNhbnZhcywgcHJvcE5hbWUpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgICAgIGlmIChzdHlsZS53aWR0aCAmJiBzdHlsZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzdHlsZVtwcm9wTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW52YXNbcHJvcE5hbWVdIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbnZhc1twcm9wTmFtZV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZpZXdwb3J044KSQ2FudmFz5YaF44GuUmVjdGFuZ2xl44Gr5aSJ5o+b44GZ44KLXG4gICAgICogQHBhcmFtIGNhbnZhc1xuICAgICAqIEBwYXJhbSB2aWV3cG9ydFxuICAgICAqL1xuICAgIHN0YXRpYyBjb252ZXJ0VG9SZWN0YW5nbGUoY2FudmFzLCB2aWV3cG9ydCkge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmdldENhbnZhc0hlaWdodChjYW52YXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDE6IHZpZXdwb3J0LngsXG4gICAgICAgICAgICB4Mjogdmlld3BvcnQueCArIHZpZXdwb3J0LndpZHRoLFxuICAgICAgICAgICAgeTE6IGhlaWdodCAtICh2aWV3cG9ydC55ICsgdmlld3BvcnQuaGVpZ2h0KSxcbiAgICAgICAgICAgIHkyOiBoZWlnaHQgLSB2aWV3cG9ydC55LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg57jgqbjgrnjg53jgqTjg7Pjgr/jg7zjgYzmjIflrprjgZXjgozjgZ92aWV3cG9ydOWGheOBq+WPjuOBvuOBo+OBpuOBhOOCi+OBi+OCkuWIpOWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBjYW52YXNcbiAgICAgKiBAcGFyYW0gdmlld3BvcnRcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNDb250YWluKGNhbnZhcywgdmlld3BvcnQsIGV2ZW50KSB7XG4gICAgICAgIGlmICh2aWV3cG9ydCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5jb252ZXJ0VG9SZWN0YW5nbGUoY2FudmFzLCB2aWV3cG9ydCk7XG4gICAgICAgIHJldHVybiAoZXZlbnQub2Zmc2V0WCA+PSByZWN0LngxICYmXG4gICAgICAgICAgICBldmVudC5vZmZzZXRYIDw9IHJlY3QueDIgJiZcbiAgICAgICAgICAgIGV2ZW50Lm9mZnNldFkgPj0gcmVjdC55MSAmJlxuICAgICAgICAgICAgZXZlbnQub2Zmc2V0WSA8PSByZWN0LnkyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oe44Km44K544Kk44OZ44Oz44OI44KSV2ViR0zluqfmqJnns7vjgavlpInmj5vjgZnjgotcbiAgICAgKiBAcGFyYW0gY2FudmFzXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIG1vdXNlIOOCquODl+OCt+ODp+ODsyDmjIflrprjgZXjgozjgZ/loLTlkIjjgIHntZDmnpzjgpLjgZPjga5WZWN0b3Iy44Gr5LiK5pu444GN44GZ44KLXG4gICAgICovXG4gICAgc3RhdGljIGNvbnZlcnRUb01vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCwgdmlld3BvcnQsIG1vdXNlKSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5nZXRNb3VzZVBvc2l0aW9uKGNhbnZhcywgZXZlbnQsIHZpZXdwb3J0KTtcbiAgICAgICAgaWYgKG1vdXNlKSB7XG4gICAgICAgICAgICBtb3VzZS5zZXQoeCwgeSk7XG4gICAgICAgICAgICByZXR1cm4gbW91c2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHgsIHkpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0TW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50LCB2aWV3cG9ydCkge1xuICAgICAgICBpZiAodmlld3BvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZpZXdwb3J0TW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50LCB2aWV3cG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzTW91c2VQb3NpdGlvbihjYW52YXMsIGV2ZW50KTtcbiAgICB9XG4gICAgc3RhdGljIGdldENhbnZhc01vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCkge1xuICAgICAgICBjb25zdCB4ID0gKGV2ZW50Lm9mZnNldFggLyB0aGlzLmdldENhbnZhc1dpZHRoKGNhbnZhcykpICogMiAtIDE7XG4gICAgICAgIGNvbnN0IHkgPSAtKGV2ZW50Lm9mZnNldFkgLyB0aGlzLmdldENhbnZhc0hlaWdodChjYW52YXMpKSAqIDIgKyAxO1xuICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfVxuICAgIHN0YXRpYyBnZXRWaWV3cG9ydE1vdXNlUG9zaXRpb24oY2FudmFzLCBldmVudCwgdmlld3BvcnQpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuY29udmVydFRvUmVjdGFuZ2xlKGNhbnZhcywgdmlld3BvcnQpO1xuICAgICAgICBjb25zdCBtb3VzZVggPSBldmVudC5vZmZzZXRYIC0gcmVjdC54MTtcbiAgICAgICAgY29uc3QgbW91c2VZID0gZXZlbnQub2Zmc2V0WSAtIHJlY3QueTE7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gcmVjdC54MiAtIHJlY3QueDE7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3QueTIgLSByZWN0LnkxO1xuICAgICAgICBjb25zdCB4ID0gKG1vdXNlWCAvIHdpZHRoKSAqIDIgLSAxO1xuICAgICAgICBjb25zdCB5ID0gLShtb3VzZVkgLyBoZWlnaHQpICogMiArIDE7XG4gICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCdXR0b25JbnRlcmFjdGlvbkhhbmRsZXIsIENoZWNrQm94SW50ZXJhY3Rpb25IYW5kbGVyLCBSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlciwgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0NsaWNrYWJsZU1lc2godmlldykge1xuICAgIGNvbnN0IGFueVZpZXcgPSB2aWV3O1xuICAgIGFueVZpZXdbXCJpbnRlcmFjdGlvbkhhbmRsZXJcIl0gPSBuZXcgQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyKHtcbiAgICAgICAgdmlldzogYW55VmlldyxcbiAgICB9KTtcbiAgICByZXR1cm4gdmlldztcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9DaGVja2JveE1lc2godmlldykge1xuICAgIGNvbnN0IGFueVZpZXcgPSB2aWV3O1xuICAgIGFueVZpZXdbXCJpbnRlcmFjdGlvbkhhbmRsZXJcIl0gPSBuZXcgQ2hlY2tCb3hJbnRlcmFjdGlvbkhhbmRsZXIoe1xuICAgICAgICB2aWV3OiBhbnlWaWV3LFxuICAgIH0pO1xuICAgIHJldHVybiB2aWV3O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1JhZGlvQnV0dG9uTWVzaCh2aWV3KSB7XG4gICAgY29uc3QgYW55VmlldyA9IHZpZXc7XG4gICAgYW55Vmlld1tcImludGVyYWN0aW9uSGFuZGxlclwiXSA9IG5ldyBSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlcih7XG4gICAgICAgIHZpZXc6IGFueVZpZXcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHZpZXc7XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi92aWV3L2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmFjdGlvbkhhbmRsZXIvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1JhZGlvQnV0dG9uTWFuYWdlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU3RhdGVNYXRlcmlhbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vTW91c2VFdmVudE1hbmFnZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RocmVlTW91c2VFdmVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vVmlld1BvcnRVdGlsLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb252ZXJ0VG9JbnRlcmFjdGl2ZVZpZXcuanNcIjtcbiIsImltcG9ydCB7XG4gIENoZWNrQm94TWVzaCxcbiAgQ2hlY2tCb3hTcHJpdGUsXG4gIENsaWNrYWJsZU1lc2gsXG4gIENsaWNrYWJsZVNwcml0ZSxcbiAgTW91c2VFdmVudE1hbmFnZXIsXG4gIFJhZGlvQnV0dG9uTWFuYWdlcixcbiAgUmFkaW9CdXR0b25NZXNoLFxuICBTdGF0ZU1hdGVyaWFsU2V0LFxufSBmcm9tIFwiLi4vZXNtL2luZGV4LmpzXCI7XG5pbXBvcnQge1xuICBBbWJpZW50TGlnaHQsXG4gIEJveEdlb21ldHJ5LFxuICBNZXNoQmFzaWNNYXRlcmlhbCxcbiAgUGVyc3BlY3RpdmVDYW1lcmEsXG4gIFNjZW5lLFxuICBTcHJpdGVNYXRlcmlhbCxcbiAgVGV4dHVyZUxvYWRlcixcbiAgVmVjdG9yNCxcbiAgV2ViR0xSZW5kZXJlcixcbn0gZnJvbSBcInRocmVlXCI7XG5cbmNvbnN0IFcgPSAxMjgwO1xuY29uc3QgSCA9IDkwMDtcblxuY2xhc3MgU2NlbmVTZXQge1xuICBiZztcbiAgdmlld3BvcnQ7XG4gIHNjZW5lO1xuICBjYW1lcmE7XG4gIG1hbmFnZXI7XG4gIGNvbnN0cnVjdG9yKHgsIHksIHcsIGgsIGNhbnZhcywgYmcpIHtcbiAgICB0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoeCwgeSwgdywgaCk7XG4gICAgdGhpcy5iZyA9IGJnO1xuXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBTY2VuZSgpO1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCB3IC8gaCwgMSwgNDAwKTtcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgMTAwKTtcbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmNhbWVyYSk7XG5cbiAgICAvL+W5s+ihjOWFiea6kOOCquODluOCuOOCp+OCr+ODiChsaWdodCnjga7oqK3lrppcbiAgICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAxLjApO1xuICAgIHRoaXMuc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG5cbiAgICB0aGlzLm1hbmFnZXIgPSBuZXcgTW91c2VFdmVudE1hbmFnZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEsIGNhbnZhcywge1xuICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnQsXG4gICAgfSk7XG5cbiAgICB0ZXN0QnV0dG9uKHRoaXMuc2NlbmUpO1xuICAgIHRlc3RDaGVja2JveCh0aGlzLnNjZW5lKTtcbiAgICB0ZXN0U3ByaXRlKHRoaXMuc2NlbmUpO1xuICAgIHRlc3RTZWxlY3RhYmxlU3ByaXRlKHRoaXMuc2NlbmUpO1xuICAgIHRlc3RSYWRpbyh0aGlzLnNjZW5lKTtcbiAgfVxuXG4gIHJlbmRlcihyZW5kZXJlcikge1xuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IodGhpcy5iZyk7XG4gICAgcmVuZGVyZXIuY2xlYXJEZXB0aCgpOyAvLyBpbXBvcnRhbnQhXG4gICAgcmVuZGVyZXIuc2V0U2Npc3NvclRlc3QodHJ1ZSk7XG5cbiAgICByZW5kZXJlci5zZXRTY2lzc29yKHRoaXMudmlld3BvcnQpO1xuICAgIHJlbmRlcmVyLnNldFZpZXdwb3J0KHRoaXMudmlld3BvcnQpO1xuICAgIHJlbmRlcmVyLmNsZWFyKCk7XG5cbiAgICByZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgIHJlbmRlcmVyLnNldFNjaXNzb3JUZXN0KGZhbHNlKTtcbiAgfVxufVxuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICAvLyDjgrfjg7zjg7PjgpLkvZzmiJBcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3ZWJnbC1jYW52YXNcIik7XG4gIGNvbnN0IHJlbmRlck9wdGlvbiA9IHtcbiAgICBjYW52YXMsXG4gIH07XG4gIGNvbnN0IHJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIocmVuZGVyT3B0aW9uKTtcbiAgcmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG4gIHJlbmRlcmVyLnNldFNpemUoVywgSCk7XG4gIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuXG4gIGNvbnN0IHNjZW5lMSA9IG5ldyBTY2VuZVNldCgyMCwgMjAsIDQ4MCwgMzYwLCBjYW52YXMsIDB4MjIyMjIyKTtcbiAgY29uc3Qgc2NlbmUyID0gbmV3IFNjZW5lU2V0KDQ4MCwgMzYwLCA1MjAsIDQ4MCwgY2FudmFzLCAweDQ0NDQ0NCk7XG5cbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDAwMDApO1xuICAgIHJlbmRlcmVyLmNsZWFyKCk7XG5cbiAgICBzY2VuZTEucmVuZGVyKHJlbmRlcmVyKTtcbiAgICBzY2VuZTIucmVuZGVyKHJlbmRlcmVyKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfTtcbiAgcmVuZGVyKCk7XG59O1xuXG4vKipcbiAqIE1lc2jnlKjjga7jg57jg4bjg6rjgqLjg6vjgrvjg4Pjg4jjgpLmlrDopo/jgavlj5blvpfjgZnjgovjgIJcbiAqIEByZXR1cm5zIHtTdGF0ZU1hdGVyaWFsU2V0fVxuICovXG5jb25zdCBnZXRNYXRlcmlhbFNldCA9ICgpID0+IHtcbiAgcmV0dXJuIG5ldyBTdGF0ZU1hdGVyaWFsU2V0KHtcbiAgICBub3JtYWw6IGdldE1lc2hNYXRlcmlhbCgwLjYpLFxuICAgIG92ZXI6IGdldE1lc2hNYXRlcmlhbCgwLjgpLFxuICAgIGRvd246IGdldE1lc2hNYXRlcmlhbCgxLjApLFxuICAgIG5vcm1hbFNlbGVjdDogZ2V0TWVzaE1hdGVyaWFsKDAuNiwgMHhmZmZmMDApLFxuICAgIG92ZXJTZWxlY3Q6IGdldE1lc2hNYXRlcmlhbCgwLjgsIDB4ZmZmZjAwKSxcbiAgICBkb3duU2VsZWN0OiBnZXRNZXNoTWF0ZXJpYWwoMS4wLCAweGZmZmYwMCksXG4gIH0pO1xufTtcblxuY29uc3QgZ2V0TWVzaE1hdGVyaWFsID0gKG9wYWNpdHksIGNvbG9yKSA9PiB7XG4gIGlmIChjb2xvciA9PSBudWxsKSBjb2xvciA9IDB4ZmZmZmZmO1xuICByZXR1cm4gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIOOCueODl+ODqeOCpOODiOeUqOOBruODnuODhuODquOCouODq+OCu+ODg+ODiOOCkuaWsOimj+OBq+eUn+aIkOOBmeOCi+OAglxuICovXG5jb25zdCBnZXRTcHJpdGVNYXRlcmlhbFNldCA9ICgpID0+IHtcbiAgcmV0dXJuIG5ldyBTdGF0ZU1hdGVyaWFsU2V0KHtcbiAgICBub3JtYWw6IGdldFNwcml0ZU1hdGVyaWFsKFwiLi9idG4wNDVfMDEucG5nXCIsIDEuMCksXG4gICAgb3ZlcjogZ2V0U3ByaXRlTWF0ZXJpYWwoXCIuL2J0bjA0NV8wMi5wbmdcIiwgMS4wKSxcbiAgICBkb3duOiBnZXRTcHJpdGVNYXRlcmlhbChcIi4vYnRuMDQ1XzAzLnBuZ1wiLCAxLjApLFxuICAgIG5vcm1hbFNlbGVjdDogZ2V0U3ByaXRlTWF0ZXJpYWwoXCIuL2J0bjA0NV8wMS5wbmdcIiwgMC41KSxcbiAgICBvdmVyU2VsZWN0OiBnZXRTcHJpdGVNYXRlcmlhbChcIi4vYnRuMDQ1XzAyLnBuZ1wiLCAwLjUpLFxuICAgIGRvd25TZWxlY3Q6IGdldFNwcml0ZU1hdGVyaWFsKFwiLi9idG4wNDVfMDMucG5nXCIsIDAuNSksXG4gIH0pO1xufTtcblxuLyoqXG4gKiDjgrnjg5fjg6njgqTjg4jnlKjjg57jg4bjg6rjgqLjg6vjgpLnlJ/miJDjgZnjgotcbiAqIEBwYXJhbSBpbWcg44Oe44OD44OX55S75YOPVVJMXG4gKiBAcGFyYW0gb3BhY2l0eSDpgI/pgY7luqZcbiAqIEBwYXJhbSBjb2xvciDjgqvjg6njg7xcbiAqIEByZXR1cm5zIHtTcHJpdGVNYXRlcmlhbH1cbiAqL1xuY29uc3QgZ2V0U3ByaXRlTWF0ZXJpYWwgPSAoaW1nLCBvcGFjaXR5LCBjb2xvcikgPT4ge1xuICBpZiAoY29sb3IgPT0gbnVsbCkgY29sb3IgPSAweGZmZmZmZjtcbiAgcmV0dXJuIG5ldyBTcHJpdGVNYXRlcmlhbCh7XG4gICAgbWFwOiBuZXcgVGV4dHVyZUxvYWRlcigpLmxvYWQoaW1nKSxcbiAgICBjb2xvcjogY29sb3IsXG4gICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgfSk7XG59O1xuXG5jb25zdCB0ZXN0QnV0dG9uID0gKHNjZW5lKSA9PiB7XG4gIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KDYsIDYsIDYpO1xuICBjb25zdCBjbGlja2FibGUgPSBuZXcgQ2xpY2thYmxlTWVzaCh7XG4gICAgZ2VvOiBnZW9tZXRyeSxcbiAgICBtYXRlcmlhbDogZ2V0TWF0ZXJpYWxTZXQoKSxcbiAgfSk7XG5cbiAgY2xpY2thYmxlLnBvc2l0aW9uLnNldCgtMTAsIDIwLCAwKTtcbiAgc2NlbmUuYWRkKGNsaWNrYWJsZSk7XG59O1xuXG5jb25zdCB0ZXN0Q2hlY2tib3ggPSAoc2NlbmUpID0+IHtcbiAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoNiwgNiwgNik7XG4gIGNvbnN0IGNsaWNrYWJsZSA9IG5ldyBDaGVja0JveE1lc2goe1xuICAgIGdlbzogZ2VvbWV0cnksXG4gICAgbWF0ZXJpYWw6IGdldE1hdGVyaWFsU2V0KCksXG4gIH0pO1xuXG4gIGNsaWNrYWJsZS5wb3NpdGlvbi5zZXQoMCwgMjAsIDApO1xuICBzY2VuZS5hZGQoY2xpY2thYmxlKTtcbn07XG5cbmNvbnN0IHRlc3RTcHJpdGUgPSAoc2NlbmUpID0+IHtcbiAgY29uc3QgY2xpY2thYmxlID0gbmV3IENsaWNrYWJsZVNwcml0ZShnZXRTcHJpdGVNYXRlcmlhbFNldCgpKTtcbiAgYWxpZ25TcHJpdGUoc2NlbmUsIGNsaWNrYWJsZSwgMTApO1xufTtcblxuY29uc3QgdGVzdFNlbGVjdGFibGVTcHJpdGUgPSAoc2NlbmUpID0+IHtcbiAgY29uc3Qgc2VsZWN0YWJsZSA9IG5ldyBDaGVja0JveFNwcml0ZShnZXRTcHJpdGVNYXRlcmlhbFNldCgpKTtcbiAgYWxpZ25TcHJpdGUoc2NlbmUsIHNlbGVjdGFibGUsIDIwKTtcbn07XG5cbmNvbnN0IGFsaWduU3ByaXRlID0gKHNjZW5lLCBzcHJpdGUsIHgpID0+IHtcbiAgc3ByaXRlLnBvc2l0aW9uLnNldCh4LCAyMCwgMCk7XG4gIGNvbnN0IHNjYWxlID0gOC4wO1xuICBzcHJpdGUuc2NhbGUuc2V0KHNjYWxlLCBzY2FsZSwgc2NhbGUpO1xuICBzY2VuZS5hZGQoc3ByaXRlKTtcbn07XG5cbmNvbnN0IHRlc3RSYWRpbyA9IChzY2VuZSkgPT4ge1xuICBjb25zdCBnZW9tZXRyeSA9IG5ldyBCb3hHZW9tZXRyeSg2LCA2LCA2KTtcblxuICBjb25zdCBpbml0QnV0dG9uID0gKHgsIGJ1dHRvblZhbHVlKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gbmV3IFJhZGlvQnV0dG9uTWVzaCh7XG4gICAgICBnZW86IGdlb21ldHJ5LFxuICAgICAgbWF0ZXJpYWw6IGdldE1hdGVyaWFsU2V0KCksXG4gICAgfSk7XG4gICAgYnV0dG9uLnBvc2l0aW9uLnNldCh4LCAtMTAsIDApO1xuICAgIGJ1dHRvbi5pbnRlcmFjdGlvbkhhbmRsZXIudmFsdWUgPSBidXR0b25WYWx1ZTtcbiAgICBzY2VuZS5hZGQoYnV0dG9uKTtcbiAgICByZXR1cm4gYnV0dG9uO1xuICB9O1xuXG4gIGNvbnN0IG1hbmFnZXIgPSBuZXcgUmFkaW9CdXR0b25NYW5hZ2VyKCk7XG5cbiAgbWFuYWdlci5hZGRCdXR0b24oXG4gICAgaW5pdEJ1dHRvbigtMTAsIFwiYnV0dG9uMDFcIiksXG4gICAgaW5pdEJ1dHRvbigwLCBNYXRoLlBJKSxcbiAgICBpbml0QnV0dG9uKDEwLCB7IHZhbHVlMDE6IDEsIHZhbHVlMDI6IDIgfSksXG4gICk7XG4gIG1hbmFnZXIuYWRkQnV0dG9uKGluaXRCdXR0b24oMjAsIHVuZGVmaW5lZCkpO1xuXG4gIG1hbmFnZXIub24oXCJzZWxlY3RcIiwgKGUpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlLmludGVyYWN0aW9uSGFuZGxlci52YWx1ZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbndpbmRvdy5vbmxvYWQgPSBvbkRvbUNvbnRlbnRzTG9hZGVkO1xuIl0sIm5hbWVzIjpbIkdyb3VwIiwiQnV0dG9uSW50ZXJhY3Rpb25IYW5kbGVyIiwiQ2xpY2thYmxlR3JvdXAiLCJjb25zdHJ1Y3RvciIsImludGVyYWN0aW9uSGFuZGxlciIsInZpZXciLCJNZXNoIiwiQ2hlY2tCb3hJbnRlcmFjdGlvbkhhbmRsZXIiLCJSYWRpb0J1dHRvbkludGVyYWN0aW9uSGFuZGxlciIsIkludGVyYWN0aXZlTWVzaCIsInBhcmFtZXRlcnMiLCJjdG9yIiwiZ2VvIiwibWF0ZXJpYWwiLCJDbGlja2FibGVNZXNoIiwiQ2hlY2tCb3hNZXNoIiwiUmFkaW9CdXR0b25NZXNoIiwiU3ByaXRlIiwiSW50ZXJhY3RpdmVTcHJpdGUiLCJDbGlja2FibGVTcHJpdGUiLCJDaGVja0JveFNwcml0ZSIsIlJhZGlvQnV0dG9uU3ByaXRlIiwiRXZlbnRFbWl0dGVyIiwiVGhyZWVNb3VzZUV2ZW50VXRpbCIsIm1hdGVyaWFsU2V0IiwiX21hdGVyaWFsU2V0IiwidmFsdWUiLCJpc1NhbWUiLCJ1cGRhdGVNYXRlcmlhbCIsImlzT3ZlciIsIl9pc092ZXIiLCJpc1ByZXNzIiwiX2lzUHJlc3MiLCJfZW5hYmxlIiwibW91c2VFbmFibGVkIiwiZnJvemVuIiwic3RhdGUiLCJfYWxwaGEiLCJvbk1vdXNlRG93bkhhbmRsZXIiLCJldmVudCIsImNoZWNrQWN0aXZpdHkiLCJ1cGRhdGVTdGF0ZSIsImVtaXQiLCJ0eXBlIiwib25Nb3VzZVVwSGFuZGxlciIsImN1cnJlbnRQcmVzcyIsIm5leHRTdGF0ZSIsIm9uTW91c2VDbGljayIsImUiLCJnZW5lcmF0ZSIsIm9uTW91c2VPdmVySGFuZGxlciIsIm9uTW91c2VPdmVyT3V0SGFuZGxlciIsIm9uTW91c2VPdXRIYW5kbGVyIiwiYWxwaGEiLCJudW1iZXIiLCJlbmFibGUiLCJzd2l0Y2hFbmFibGUiLCJkaXNhYmxlIiwic2V0T3BhY2l0eSIsInN0YXRlTWF0IiwiZ2V0TWF0ZXJpYWwiLCJib29sIiwiQ2xpY2thYmxlT2JqZWN0IiwiY29uc29sZSIsIndhcm4iLCJhcmd1bWVudHMiLCJfaXNTZWxlY3QiLCJzZWxlY3Rpb24iLCJDaGVja0JveE9iamVjdCIsIl9pc0Zyb3plbiIsImlzRnJvemVuIiwiUmFkaW9CdXR0b25PYmplY3QiLCJSYWRpb0J1dHRvbk1hbmFnZXIiLCJfaW50ZXJhY3Rpb25IYW5kbGVycyIsIm9uU2VsZWN0ZWRCdXR0b24iLCJpc1NlbGVjdGVkIiwic2VsZWN0IiwiYWRkQnV0dG9uIiwiYnV0dG9ucyIsImZvckVhY2giLCJidG4iLCJhZGRJbnRlcmFjdGlvbkhhbmRsZXIiLCJwdXNoIiwib24iLCJyZW1vdmVCdXR0b24iLCJidXR0b24iLCJyZW1vdmVJbnRlcmFjdGlvbkhhbmRsZXIiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJvZmYiLCJfc2VsZWN0ZWQiLCJtZGwiLCJldnQiLCJzZWxlY3RlZCIsImludGVyYWN0aW9uSGFuZGxlcnMiLCJTdGF0ZU1hdGVyaWFsIiwidXBkYXRlQWxwaGEiLCJfbWF0ZXJpYWwiLCJBcnJheSIsImFscGhhQXJyYXkiLCJnZXRBbHBoYUFycmF5Iiwib3BhY2l0eSIsIm1hdEFycmF5IiwibiIsImxlbmd0aCIsImFycmF5IiwiaSIsIlN0YXRlTWF0ZXJpYWxTZXQiLCJwYXJhbSIsIm1hdGVyaWFscyIsIm5vcm1hbCIsIm92ZXIiLCJpbml0TWF0ZXJpYWwiLCJkb3duIiwibm9ybWFsU2VsZWN0Iiwib3ZlclNlbGVjdCIsImRvd25TZWxlY3QiLCJpbml0IiwiZGVmYXVsdE1hdGVyaWFsIiwiRXJyb3IiLCJtYXQiLCJSQUZUaWNrZXIiLCJSYXljYXN0ZXIiLCJWZWN0b3IyIiwiVmlld1BvcnRVdGlsIiwiTW91c2VFdmVudE1hbmFnZXIiLCJzY2VuZSIsImNhbWVyYSIsImNhbnZhcyIsIm9wdGlvbiIsInJheWNhc3RlciIsIm1vdXNlIiwiY3VycmVudE92ZXIiLCJoYXNUaHJvdHRsZWQiLCJ0aHJvdHRsaW5nRGVsdGEiLCJvblRpY2siLCJNYXRoIiwibWF4IiwiZGVsdGEiLCJ0aHJvdHRsaW5nVGltZV9tcyIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJwcmV2ZW50RGVmYXVsdCIsImludGVyc2VjdHMiLCJnZXRJbnRlcnNlY3RzIiwiY2xlYXJPdmVyIiwiYmVmb3JlT3ZlciIsImludGVyc2VjdCIsImNoZWNrZWQiLCJjaGVja1RhcmdldCIsIm9iamVjdCIsImluY2x1ZGVzIiwib25CdXR0b25IYW5kbGVyIiwib25Eb2N1bWVudE1vdXNlVXBEb3duIiwiZXZlbnRUeXBlIiwiaXNDb250YWluIiwidmlld3BvcnQiLCJjaGVja0ludGVyc2VjdHMiLCJyZWN1cnNpdmUiLCJ0YXJnZXRzIiwiY2hpbGRyZW4iLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wbGVtZW50c0lDbGlja2FibGVPYmplY3QzRCIsImFyZyIsImltcGxlbWVudHNEZXBhcnRlZElDbGlja2FibGVPYmplY3QzRCIsIm1vZGVsIiwidGFyZ2V0IiwiaGFzVGFyZ2V0IiwicGFyZW50IiwiY29udmVydFRvTW91c2VQb3NpdGlvbiIsInNldEZyb21DYW1lcmEiLCJpbnRlcnNlY3RPYmplY3RzIiwiaGFuZGxlck9yVmlldyIsImdldEludGVyYWN0aW9uSGFuZGxlciIsImdldFNlbGVjdGlvbiIsInVuZGVmaW5lZCIsImNsb25lIiwiZ2V0Q2FudmFzSGVpZ2h0IiwiZ2V0Q2FudmFzU2l6ZSIsImdldENhbnZhc1dpZHRoIiwicHJvcE5hbWUiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udmVydFRvUmVjdGFuZ2xlIiwieDEiLCJ4IiwieDIiLCJ5MSIsInkiLCJ5MiIsInJlY3QiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImdldE1vdXNlUG9zaXRpb24iLCJzZXQiLCJnZXRWaWV3cG9ydE1vdXNlUG9zaXRpb24iLCJnZXRDYW52YXNNb3VzZVBvc2l0aW9uIiwibW91c2VYIiwibW91c2VZIiwiY29udmVydFRvQ2xpY2thYmxlTWVzaCIsImFueVZpZXciLCJjb252ZXJ0VG9DaGVja2JveE1lc2giLCJjb252ZXJ0VG9SYWRpb0J1dHRvbk1lc2giLCJBbWJpZW50TGlnaHQiLCJCb3hHZW9tZXRyeSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJTY2VuZSIsIlNwcml0ZU1hdGVyaWFsIiwiVGV4dHVyZUxvYWRlciIsIlZlY3RvcjQiLCJXZWJHTFJlbmRlcmVyIiwiVyIsIkgiLCJTY2VuZVNldCIsImJnIiwibWFuYWdlciIsInciLCJoIiwicG9zaXRpb24iLCJhZGQiLCJhbWJpZW50TGlnaHQiLCJ0ZXN0QnV0dG9uIiwidGVzdENoZWNrYm94IiwidGVzdFNwcml0ZSIsInRlc3RTZWxlY3RhYmxlU3ByaXRlIiwidGVzdFJhZGlvIiwicmVuZGVyIiwicmVuZGVyZXIiLCJzZXRDbGVhckNvbG9yIiwiY2xlYXJEZXB0aCIsInNldFNjaXNzb3JUZXN0Iiwic2V0U2Npc3NvciIsInNldFZpZXdwb3J0IiwiY2xlYXIiLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlck9wdGlvbiIsImF1dG9DbGVhciIsInNldFNpemUiLCJzZXRQaXhlbFJhdGlvIiwic2NlbmUxIiwic2NlbmUyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZ2V0TWF0ZXJpYWxTZXQiLCJnZXRNZXNoTWF0ZXJpYWwiLCJjb2xvciIsInRyYW5zcGFyZW50IiwiZ2V0U3ByaXRlTWF0ZXJpYWxTZXQiLCJnZXRTcHJpdGVNYXRlcmlhbCIsImltZyIsIm1hcCIsImxvYWQiLCJnZW9tZXRyeSIsImNsaWNrYWJsZSIsImFsaWduU3ByaXRlIiwic2VsZWN0YWJsZSIsInNwcml0ZSIsInNjYWxlIiwiaW5pdEJ1dHRvbiIsImJ1dHRvblZhbHVlIiwiUEkiLCJ2YWx1ZTAxIiwidmFsdWUwMiIsImxvZyIsIm9ubG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],g=!0,s=0;s<U.length;s++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[s])))?U.splice(s--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(C--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={626:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,s,n]=F,C=0;if(g.some((U=>0!==Q[U]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(n)var t=n(__webpack_require__)}for(U&&U(F);C<g.length;C++)I=g[C],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(t)},F=self.webpackChunk_masatomakino_threejs_interactive_object=self.webpackChunk_masatomakino_threejs_interactive_object||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(29)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();