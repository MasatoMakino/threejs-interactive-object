(()=>{"use strict";var __webpack_modules__={22:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/ThreeMouseEvent.js\nclass ThreeMouseEvent {\n  constructor(type, modelOrView) {\n    const model = ThreeMouseEvent.getModel(modelOrView);\n    this.type = type;\n    this.model = model;\n\n    if (type === ThreeMouseEventType.SELECT) {\n      this.isSelected = ThreeMouseEvent.getSelection(model);\n    }\n  }\n\n  static getModel(modelOrView) {\n    if ("model" in modelOrView) {\n      return modelOrView.model;\n    }\n\n    return modelOrView;\n  }\n  /**\n   * SELECTイベントの場合は、対象ボタンの選択状態を取得\n   * @param model\n   */\n\n\n  static getSelection(model) {\n    if ("selection" in model) {\n      return !!model["selection"];\n    } else {\n      throw new Error("選択可能なボタン以外を引数にして、SELECTイベントをインスタンス化しました。SELECTイベントはISelectableObject3Dを実装したクラスとともにインスタンス化してください。");\n    }\n  }\n\n  clone() {\n    return new ThreeMouseEvent(this.type, this.model);\n  }\n\n}\nvar ThreeMouseEventType;\n\n(function (ThreeMouseEventType) {\n  ThreeMouseEventType["CLICK"] = "THREE_MOUSE_EVENT_CLICK";\n  ThreeMouseEventType["OVER"] = "THREE_MOUSE_EVENT_OVER";\n  ThreeMouseEventType["OUT"] = "THREE_MOUSE_EVENT_OUT";\n  ThreeMouseEventType["DOWN"] = "THREE_MOUSE_EVENT_DOWN";\n  ThreeMouseEventType["UP"] = "THREE_MOUSE_EVENT_UP";\n  ThreeMouseEventType["SELECT"] = "THREE_MOUSE_EVENT_SELECT";\n})(ThreeMouseEventType || (ThreeMouseEventType = {}));\n;// CONCATENATED MODULE: ./esm/ViewPortUtil.js\n\n/**\n * ViewPort矩形に関する処理を受け持つユーティリティクラス\n */\n\nclass ViewPortUtil {\n  /**\n   * canvasの高さを取得する。\n   *\n   * three.jsのWebGLRendererは、devicePixelRatioにあわせてcanvas.heightを変更する。\n   * ブラウザの拡大縮小を行うと、devicePixelRatioが変更されるためcanvas.heightを取得できない。\n   * そのためまずstyleから高さを取得し、styleがない場合はdevicePixelRatioを加味した高さを取得する。\n   *\n   * @param canvas\n   * @private\n   */\n  static getCanvasHeight(canvas) {\n    const style = canvas.style;\n\n    if (style.width && style.height) {\n      return parseInt(style.height);\n    } else if (window.devicePixelRatio != null) {\n      return canvas.height / window.devicePixelRatio;\n    }\n\n    return canvas.height;\n  }\n\n  static getCanvasWidth(canvas) {\n    const style = canvas.style;\n\n    if (style.width && style.height) {\n      return parseInt(style.width);\n    } else if (window.devicePixelRatio != null) {\n      return canvas.width / window.devicePixelRatio;\n    }\n\n    return canvas.width;\n  }\n  /**\n   * ViewportをCanvas内のRectangleに変換する\n   * @param canvas\n   * @param viewport\n   */\n\n\n  static convertToRectangle(canvas, viewport) {\n    const height = this.getCanvasHeight(canvas);\n    return {\n      x1: viewport.x,\n      x2: viewport.x + viewport.width,\n      y1: height - (viewport.y + viewport.height),\n      y2: height - viewport.y\n    };\n  }\n  /**\n   * マウスポインターが指定されたviewport内に収まっているかを判定する。\n   * @param canvas\n   * @param viewport\n   * @param event\n   */\n\n\n  static isContain(canvas, viewport, event) {\n    if (viewport == null) {\n      return true;\n    }\n\n    const rect = this.convertToRectangle(canvas, viewport);\n    return event.offsetX >= rect.x1 && event.offsetX <= rect.x2 && event.offsetY >= rect.y1 && event.offsetY <= rect.y2;\n  }\n  /**\n   * マウスイベントをWebGL座標系に変換する\n   * @param canvas\n   * @param event\n   * @param viewport\n   * @param mouse オプション 指定された場合、結果をこのVector2に上書きする\n   */\n\n\n  static convertToMousePosition(canvas, event, viewport, mouse) {\n    const {\n      x,\n      y\n    } = this.getMousePosition(canvas, event, viewport);\n\n    if (mouse) {\n      mouse.set(x, y);\n      return mouse;\n    }\n\n    return new three_module/* Vector2 */.FM8(x, y);\n  }\n\n  static getMousePosition(canvas, event, viewport) {\n    if (viewport) {\n      return this.getViewportMousePosition(canvas, event, viewport);\n    }\n\n    return this.getCanvasMousePosition(canvas, event);\n  }\n\n  static getCanvasMousePosition(canvas, event) {\n    const x = event.offsetX / this.getCanvasWidth(canvas) * 2 - 1;\n    const y = -(event.offsetY / this.getCanvasHeight(canvas)) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n\n  static getViewportMousePosition(canvas, event, viewport) {\n    const rect = this.convertToRectangle(canvas, viewport);\n    const mouseX = event.offsetX - rect.x1;\n    const mouseY = event.offsetY - rect.y1;\n    const width = rect.x2 - rect.x1;\n    const height = rect.y2 - rect.y1;\n    const x = mouseX / width * 2 - 1;\n    const y = -(mouseY / height) * 2 + 1;\n    return {\n      x,\n      y\n    };\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/MouseEventManager.js\n\n\n\n\nclass MouseEventManager {\n  /**\n   *\n   * @param scene\n   * @param camera\n   * @param canvas\n   * @param option\n   */\n  constructor(scene, camera, canvas, option) {\n    var _a, _b, _c;\n\n    this.raycaster = new three_module/* Raycaster */.iMs();\n    this.mouse = new three_module/* Vector2 */.FM8();\n    this.hasThrottled = false;\n    this.throttlingDelta = 0;\n\n    this.onTick = e => {\n      this.throttlingDelta += e.delta;\n\n      if (this.throttlingDelta < this.throttlingTime_ms) {\n        return;\n      }\n\n      this.hasThrottled = false;\n      this.throttlingDelta %= this.throttlingTime_ms;\n    };\n\n    this.onDocumentMouseMove = event => {\n      if (this.hasThrottled) return;\n      this.hasThrottled = true;\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n\n      if (intersects.length === 0) {\n        this.clearOver();\n        return;\n      }\n\n      const beforeOver = this.currentOver;\n      this.currentOver = [];\n\n      for (let intersect of intersects) {\n        const checked = this.checkTarget(intersect.object, ThreeMouseEventType.OVER);\n        if (checked) break;\n      }\n\n      beforeOver === null || beforeOver === void 0 ? void 0 : beforeOver.forEach(btn => {\n        if (!this.currentOver.includes(btn)) {\n          MouseEventManager.onButtonHandler(btn, ThreeMouseEventType.OUT);\n        }\n      });\n    };\n    /**\n     * カンバス上でマウスダウンかマウスアップが行われた際のイベントハンドラー\n     * マウス座標から対象となるObject3Dを探し出して操作を行う。\n     * @param {MouseEvent} event\n     */\n\n\n    this.onDocumentMouseUpDown = event => {\n      let eventType = ThreeMouseEventType.DOWN;\n\n      switch (event.type) {\n        case "mousedown":\n          eventType = ThreeMouseEventType.DOWN;\n          break;\n\n        case "mouseup":\n          eventType = ThreeMouseEventType.UP;\n          break;\n      }\n\n      if (!ViewPortUtil.isContain(this.canvas, this.viewport, event) && eventType === ThreeMouseEventType.DOWN) {\n        return;\n      }\n\n      event.preventDefault();\n      const intersects = this.getIntersects(event);\n      this.checkIntersects(intersects, eventType);\n    };\n\n    this.camera = camera;\n    this.scene = scene;\n    this.throttlingTime_ms = (_a = option === null || option === void 0 ? void 0 : option.throttlingTime_ms) !== null && _a !== void 0 ? _a : 33;\n    this.viewport = option === null || option === void 0 ? void 0 : option.viewport;\n    this.recursive = (_b = option === null || option === void 0 ? void 0 : option.recursive) !== null && _b !== void 0 ? _b : true;\n    this.targets = (_c = option === null || option === void 0 ? void 0 : option.targets) !== null && _c !== void 0 ? _c : this.scene.children;\n    this.canvas = canvas;\n    canvas.addEventListener("mousemove", this.onDocumentMouseMove, false);\n    canvas.addEventListener("mousedown", this.onDocumentMouseUpDown, false);\n    canvas.addEventListener("mouseup", this.onDocumentMouseUpDown, false);\n    esm/* RAFTicker.on */.Fz.on(esm/* RAFTickerEventType.tick */.M9.tick, this.onTick);\n  }\n  /**\n   * 現在マウスオーバーしている対象をなしにする。\n   * もし、すでにマウスオーバー対象が存在するなら、マウスアウトハンドラーを呼び出した後にクリアする。\n   */\n\n\n  clearOver() {\n    var _a;\n\n    (_a = this.currentOver) === null || _a === void 0 ? void 0 : _a.forEach(over => {\n      MouseEventManager.onButtonHandler(over, ThreeMouseEventType.OUT);\n    });\n    this.currentOver = null;\n  }\n  /**\n   * マウスの座標にかかっているオブジェクト一覧から、操作対象を検索し\n   * 指定されたタイプのハンドラー関数を実行させる。\n   * 重なり合ったオブジェクトがある場合、最前面から検索を開始する。\n   * 操作対象が見つかった時点で処理は中断され、背面オブジェクトは操作対象にならない。\n   *\n   * @param {Intersection[]} intersects\n   * @param {ThreeMouseEventType} type\n   */\n\n\n  checkIntersects(intersects, type) {\n    const n = intersects.length;\n    if (n === 0) return;\n\n    for (let i = 0; i < n; i++) {\n      const checked = this.checkTarget(intersects[i].object, type);\n\n      if (checked) {\n        break;\n      }\n    }\n  }\n  /**\n   * ボタンの各種イベントハンドラーメソッドを、typeにしたがって実行する。\n   * @param {IClickableObject3D} btn\n   * @param {ThreeMouseEventType} type\n   */\n\n\n  static onButtonHandler(btn, type) {\n    switch (type) {\n      case ThreeMouseEventType.DOWN:\n        btn.model.onMouseDownHandler(new ThreeMouseEvent(type, btn));\n        return;\n\n      case ThreeMouseEventType.UP:\n        btn.model.onMouseUpHandler(new ThreeMouseEvent(type, btn));\n        return;\n\n      case ThreeMouseEventType.OVER:\n        if (!btn.model.isOver) {\n          btn.model.onMouseOverHandler(new ThreeMouseEvent(type, btn));\n        }\n\n        return;\n\n      case ThreeMouseEventType.OUT:\n        if (btn.model.isOver) {\n          btn.model.onMouseOutHandler(new ThreeMouseEvent(type, btn));\n        }\n\n        return;\n    }\n  }\n  /**\n   * IClickableObject3Dインターフェースを実装しているか否かを判定する。\n   * ユーザー定義Type Guard\n   * @param arg\n   * @private\n   */\n\n\n  static implementsIClickableObject3D(arg) {\n    return arg !== null && typeof arg === "object" && arg.model !== null && typeof arg.model === "object" && arg.model.mouseEnabled !== null && typeof arg.model.mouseEnabled === "boolean";\n  }\n  /**\n   * 指定されたtargetオブジェクトから親方向に、クリッカブルインターフェースを継承しているオブジェクトを検索する。\n   * オブジェクトを発見した場合はtrueを、発見できない場合はfalseを返す。\n   *\n   * @param target\n   * @param type\n   * @param hasTarget\n   * @protected\n   */\n\n\n  checkTarget(target, type, hasTarget = false) {\n    //クリッカブルインターフェースを継承しているなら判定OK\n    if (MouseEventManager.implementsIClickableObject3D(target) && target.model.mouseEnabled === true) {\n      if (type === ThreeMouseEventType.OVER) {\n        this.currentOver.push(target);\n      }\n\n      MouseEventManager.onButtonHandler(target, type);\n      return this.checkTarget(target.parent, type, true);\n    } //継承していないならその親を探索継続。\n    //ターゲットから上昇して探す。\n\n\n    if (target.parent != null && target.parent.type !== "Scene") {\n      return this.checkTarget(target.parent, type, hasTarget);\n    } //親がシーンの場合は探索終了。\n\n\n    return hasTarget;\n  }\n\n  getIntersects(event) {\n    ViewPortUtil.convertToMousePosition(this.canvas, event, this.viewport, this.mouse);\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.targets, this.recursive);\n    return intersects;\n  }\n\n}\n/**\n * IClickable3DObjectの現在状態を表す定数セット。\n * これとselectフラグを掛け合わせることで状態を判定する。\n */\n\nvar ClickableState;\n\n(function (ClickableState) {\n  //ボタンの状態を表す定数\n  ClickableState["NORMAL"] = "normal";\n  ClickableState["OVER"] = "normal_over";\n  ClickableState["DOWN"] = "normal_down";\n  ClickableState["DISABLE"] = "disable";\n})(ClickableState || (ClickableState = {}));\n;// CONCATENATED MODULE: ./esm/ClickableObject.js\n\n\n/**\n * クリックに反応するObject\n * これ自体は表示オブジェクトではない。\n */\n\nclass ClickableObject_ClickableObject {\n  get materialSet() {\n    return this._materialSet;\n  }\n\n  set materialSet(value) {\n    const isSame = value === this._materialSet;\n    this._materialSet = value;\n\n    if (!isSame) {\n      this.updateMaterial();\n    }\n  }\n\n  get isOver() {\n    return this._isOver;\n  }\n\n  get isPress() {\n    return this._isPress;\n  }\n  /**\n   * コンストラクタ\n   */\n\n\n  constructor(parameters) {\n    var _a;\n\n    this._isPress = false;\n    this._isOver = false;\n    this._enable = true;\n    this.mouseEnabled = true;\n    this.frozen = false;\n    this.state = ClickableState.NORMAL;\n    this._alpha = 1.0;\n    this.view = parameters.view;\n    (_a = this._materialSet) !== null && _a !== void 0 ? _a : this._materialSet = parameters.material;\n    this.updateMaterial();\n  }\n\n  onMouseDownHandler(event) {\n    if (!this.checkActivity()) return;\n    this._isPress = true;\n    this.updateState(ClickableState.DOWN);\n    this.view.dispatchEvent(event);\n  }\n\n  onMouseUpHandler(event) {\n    if (!this.checkActivity()) return;\n    const currentPress = this._isPress;\n    this._isPress = false;\n    const nextState = this._isOver ? ClickableState.OVER : ClickableState.NORMAL;\n    this.updateState(nextState);\n    this.view.dispatchEvent(event);\n\n    if (this._isPress != currentPress) {\n      this.onMouseClick();\n      let e = new ThreeMouseEvent(ThreeMouseEventType.CLICK, this);\n      this.view.dispatchEvent(e);\n    }\n  }\n\n  onMouseClick() {}\n\n  onMouseOverHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n\n  onMouseOutHandler(event) {\n    this.onMouseOverOutHandler(event);\n  }\n\n  onMouseOverOutHandler(event) {\n    if (!this.checkActivity()) return;\n    this._isOver = event.type === ThreeMouseEventType.OVER;\n    this.updateState(this._isOver ? ClickableState.OVER : ClickableState.NORMAL);\n    this.view.dispatchEvent(event);\n  }\n\n  set alpha(number) {\n    this._alpha = number;\n    this.updateMaterial();\n  }\n\n  updateState(state) {\n    this.state = state;\n    this.updateMaterial();\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * @return    ボタンが有効か否か\n   */\n\n\n  checkActivity() {\n    return this._enable && !this.frozen;\n  }\n\n  enable() {\n    this.switchEnable(true);\n  }\n\n  disable() {\n    this.switchEnable(false);\n  }\n\n  updateMaterial() {\n    var _a, _b;\n\n    (_a = this._materialSet) === null || _a === void 0 ? void 0 : _a.setOpacity(this._alpha);\n    const stateMat = (_b = this._materialSet) === null || _b === void 0 ? void 0 : _b.getMaterial(this.state, this._enable);\n    if (!stateMat) return;\n\n    switch (this.view.type) {\n      //TODO PR Mesh.d.ts\n      case "Mesh":\n      case "Sprite":\n        this.view.material = stateMat.material;\n        break;\n\n      case "Group":\n      default:\n        break;\n    }\n  }\n\n  switchEnable(bool) {\n    this._enable = bool;\n    this.state = bool ? ClickableState.NORMAL : ClickableState.DISABLE;\n    this.updateMaterial();\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/CheckBoxObject.js\n\n\n\nclass CheckBoxObject extends ClickableObject_ClickableObject {\n  constructor() {\n    super(...arguments);\n    this._isSelect = false;\n  }\n  /**\n   * クリックイベント時の処理\n   * "click"イベントはマウスイベント類の必ず最後に発生するので\n   * ここでisSelect状態を一括管理する。\n   */\n\n\n  onMouseClick() {\n    this._isSelect = !this._isSelect;\n    const e = new ThreeMouseEvent(ThreeMouseEventType.SELECT, this);\n    this.view.dispatchEvent(e);\n    this.updateMaterial();\n  }\n\n  get selection() {\n    return this._isSelect;\n  }\n\n  set selection(bool) {\n    this._isSelect = bool;\n    this.updateState(ClickableState.NORMAL);\n  }\n\n  updateMaterial() {\n    this.materialSet.setOpacity(this._alpha);\n    const stateMat = this.materialSet.getMaterial(this.state, this._enable, this._isSelect);\n    this.view.material = stateMat.material;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/RadioButtonObject.js\n\nclass RadioButtonObject_RadioButtonObject extends CheckBoxObject {\n  constructor() {\n    super(...arguments);\n    this._isFrozen = false;\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * ラジオボタンは選択中は自身の状態を変更できない。\n   * @return    ボタンが有効か否か\n   */\n\n\n  checkActivity() {\n    return this._enable && !this._isFrozen;\n  }\n\n  get isFrozen() {\n    return this._isFrozen;\n  }\n\n  set isFrozen(bool) {\n    this._isFrozen = bool;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/InteractiveSprite.js\n\n\n\n\n\nclass InteractiveSprite extends three_module/* Sprite */.jyi {\n  constructor(material, ctor) {\n    super();\n    this.model = new ctor({\n      view: this,\n      material: material\n    });\n  }\n\n}\n\nclass ClickableSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, ClickableObject_ClickableObject);\n  }\n\n}\nclass CheckBoxSprite extends InteractiveSprite {\n  constructor(material) {\n    super(material, CheckBoxObject);\n  }\n\n}\nclass RadioButtonSprite extends (/* unused pure expression or super */ null && (InteractiveSprite)) {\n  constructor(material) {\n    super(material, RadioButtonObject);\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/InteractiveMesh.js\n\n\n\n\n\nclass InteractiveMesh extends three_module/* Mesh */.Kj0 {\n  constructor(parameters, ctor) {\n    super(parameters.geo);\n    this.model = new ctor({\n      view: this,\n      material: parameters.material\n    });\n  }\n\n}\n\nclass ClickableMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, ClickableObject_ClickableObject);\n  }\n\n}\nclass CheckBoxMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, CheckBoxObject);\n  }\n\n}\nclass RadioButtonMesh extends InteractiveMesh {\n  constructor(parameters) {\n    super(parameters, RadioButtonObject_RadioButtonObject);\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/ClickableGroup.js\n\n\nclass ClickableGroup extends (/* unused pure expression or super */ null && (Group)) {\n  constructor() {\n    super();\n    this.model = new ClickableObject({\n      view: this\n    });\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/RadioButtonManager.js\n\n\nclass RadioButtonManager extends three_module/* EventDispatcher */.pBf {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    /**\n     * このマネージャーの管理下のボタン\n     * @type {any[]}\n     * @private\n     */\n\n    this._models = [];\n    /**\n     * 管理下のボタンが選択された場合の処理\n     * @param {Event} e\n     */\n\n    this.onSelectedButton = e => {\n      const evt = e;\n\n      if (evt.isSelected) {\n        this.select(evt.model);\n      }\n    };\n  }\n  /**\n   * このマネージャーの管理下にボタンを追加する\n   * @param {IClickableObject3D[]} buttons\n   */\n\n\n  addButton(...buttons) {\n    buttons.forEach(btn => {\n      this.addModel(btn.model);\n    });\n  }\n\n  addModel(model) {\n    this._models.push(model);\n\n    model.view.addEventListener(ThreeMouseEventType.SELECT, this.onSelectedButton);\n  }\n  /**\n   * ボタンを管理下から外す。\n   * ボタン自体の削除は行わない。\n   * @param {IClickableObject3D} button\n   */\n\n\n  removeButton(button) {\n    this.removeModel(button.model);\n  }\n\n  removeModel(model) {\n    const index = this._models.indexOf(model);\n\n    if (index > -1) {\n      this._models.splice(index, 1);\n\n      model.view.removeEventListener(ThreeMouseEventType.SELECT, this.onSelectedButton);\n    }\n\n    return model;\n  }\n  /**\n   * 特定のボタンを選択する\n   * @param {RadioButtonObject} model\n   */\n\n\n  select(model) {\n    const index = this._models.indexOf(model);\n\n    if (index === -1) {\n      console.warn("管理下でないボタンが選択処理されました。");\n      return;\n    } //選択済みのボタンを再度渡されても反応しない。\n\n\n    if (model === this._selected && model.isFrozen) {\n      return;\n    }\n\n    this._selected = model;\n\n    for (let mdl of this._models) {\n      mdl.selection = mdl.isFrozen = mdl === model;\n    }\n\n    const evt = new ThreeMouseEvent(ThreeMouseEventType.SELECT, model);\n    this.dispatchEvent(evt);\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  get models() {\n    return this._models;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/StateMaterial.js\n\nclass StateMaterial {\n  constructor(material) {\n    this.alpha = 1.0;\n    this.material = material;\n  }\n\n  updateAlpha() {\n    if (this._material instanceof Array) {\n      this.alphaArray = this.getAlphaArray();\n    } else {\n      this.alpha = this._material.opacity;\n    }\n  }\n\n  getAlphaArray() {\n    const matArray = this._material;\n    const n = matArray.length;\n    const array = [];\n\n    for (let i = 0; i < n; i++) {\n      array.push(matArray[i].opacity);\n    }\n\n    return array;\n  }\n\n  set material(value) {\n    this._material = value;\n    this.updateAlpha();\n  }\n\n  get material() {\n    return this._material;\n  }\n\n  setOpacity(opacity) {\n    if (this._material instanceof Array) {\n      const n = this._material.length;\n\n      for (let i = 0; i < n; i++) {\n        const material = this._material[i];\n        material.opacity = opacity * this.alphaArray[i];\n      }\n    } else {\n      this._material.opacity = opacity * this.alpha;\n    }\n  }\n\n}\nclass StateMaterialSet {\n  constructor(param) {\n    this.normal = new StateMaterial(param.normal);\n    this.over = StateMaterialSet.initMaterial(param.over, this.normal);\n    this.down = StateMaterialSet.initMaterial(param.down, this.normal);\n    this.disable = StateMaterialSet.initMaterial(param.disable, this.normal);\n    this.normalSelect = StateMaterialSet.initMaterial(param.normalSelect, this.normal);\n    this.overSelect = StateMaterialSet.initMaterial(param.overSelect, this.normal);\n    this.downSelect = StateMaterialSet.initMaterial(param.downSelect, this.normal);\n    this.init();\n  }\n\n  static initMaterial(value, defaultMaterial) {\n    if (value == null) return defaultMaterial;\n    return new StateMaterial(value);\n  }\n\n  init() {\n    if (this.normal == null) {\n      throw new Error("通常状態のマテリアルが指定されていません。");\n    }\n\n    this.materials = [this.normal, this.normalSelect, this.over, this.overSelect, this.down, this.downSelect, this.disable];\n  }\n\n  getMaterial(state, mouseEnabled, isSelected = false) {\n    //無効状態はstateよりも優先\n    if (!mouseEnabled) {\n      return this.disable;\n    }\n\n    switch (state) {\n      case ClickableState.NORMAL:\n        return isSelected ? this.normalSelect : this.normal;\n\n      case ClickableState.DOWN:\n        return isSelected ? this.downSelect : this.down;\n\n      case ClickableState.OVER:\n        return isSelected ? this.overSelect : this.over;\n    }\n\n    return this.normal;\n  }\n\n  setOpacity(opacity) {\n    this.materials.forEach(mat => {\n      mat.setOpacity(opacity);\n    });\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_viewport.js\n\n\nconst W = 1280;\nconst H = 900;\n\nclass SceneSet {\n  bg;\n  viewport;\n  scene;\n  camera;\n  manager;\n\n  constructor(x, y, w, h, canvas, bg) {\n    this.viewport = new three_module/* Vector4 */.Ltg(x, y, w, h);\n    this.bg = bg;\n    this.scene = new three_module/* Scene */.xsS();\n    this.camera = new three_module/* PerspectiveCamera */.cPb(45, w / h, 1, 400);\n    this.camera.position.set(0, 0, 100);\n    this.scene.add(this.camera); //平行光源オブジェクト(light)の設定\n\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    this.scene.add(ambientLight);\n    this.manager = new MouseEventManager(this.scene, this.camera, canvas, {\n      viewport: this.viewport\n    });\n    testButton(this.scene);\n    testCheckbox(this.scene);\n    testSprite(this.scene);\n    testSelectableSprite(this.scene);\n    testRadio(this.scene);\n  }\n\n  render(renderer) {\n    renderer.setClearColor(this.bg);\n    renderer.clearDepth(); // important!\n\n    renderer.setScissorTest(true);\n    renderer.setScissor(this.viewport);\n    renderer.setViewport(this.viewport);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setScissorTest(false);\n  }\n\n}\n\nconst onDomContentsLoaded = () => {\n  // シーンを作成\n  const canvas = document.getElementById("webgl-canvas");\n  const renderOption = {\n    canvas\n  };\n  const renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.autoClear = false;\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  const scene1 = new SceneSet(20, 20, 480, 360, canvas, 0x222222);\n  const scene2 = new SceneSet(480, 360, 520, 480, canvas, 0x444444);\n\n  const render = () => {\n    renderer.setClearColor(0x000000);\n    renderer.clear();\n    scene1.render(renderer);\n    scene2.render(renderer);\n    requestAnimationFrame(render);\n  };\n\n  render();\n};\n/**\n * Mesh用のマテリアルセットを新規に取得する。\n * @returns {StateMaterialSet}\n */\n\n\nconst getMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getMeshMaterial(0.6),\n    over: getMeshMaterial(0.8),\n    down: getMeshMaterial(1.0),\n    normalSelect: getMeshMaterial(0.6, 0xffff00),\n    overSelect: getMeshMaterial(0.8, 0xffff00),\n    downSelect: getMeshMaterial(1.0, 0xffff00)\n  });\n};\n\nconst getMeshMaterial = (opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* MeshBasicMaterial */.vBJ({\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\n/**\n * スプライト用のマテリアルセットを新規に生成する。\n */\n\n\nconst getSpriteMaterialSet = () => {\n  return new StateMaterialSet({\n    normal: getSpriteMaterial("./btn045_01.png", 1.0),\n    over: getSpriteMaterial("./btn045_02.png", 1.0),\n    down: getSpriteMaterial("./btn045_03.png", 1.0),\n    normalSelect: getSpriteMaterial("./btn045_01.png", 0.5),\n    overSelect: getSpriteMaterial("./btn045_02.png", 0.5),\n    downSelect: getSpriteMaterial("./btn045_03.png", 0.5)\n  });\n};\n/**\n * スプライト用マテリアルを生成する\n * @param img マップ画像URL\n * @param opacity 透過度\n * @param color カラー\n * @returns {SpriteMaterial}\n */\n\n\nconst getSpriteMaterial = (img, opacity, color) => {\n  if (color == null) color = 0xffffff;\n  return new three_module/* SpriteMaterial */.xeV({\n    map: new three_module/* TextureLoader */.dpR().load(img),\n    color: color,\n    opacity: opacity,\n    transparent: true\n  });\n};\n\nconst testButton = scene => {\n  const geometry = new three_module/* BoxBufferGeometry */.nvb(6, 6, 6);\n  const clickable = new ClickableMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(-10, 20, 0);\n  scene.add(clickable);\n};\n\nconst testCheckbox = scene => {\n  const geometry = new three_module/* BoxBufferGeometry */.nvb(6, 6, 6);\n  const clickable = new CheckBoxMesh({\n    geo: geometry,\n    material: getMaterialSet()\n  });\n  clickable.position.set(0, 20, 0);\n  scene.add(clickable);\n};\n\nconst testSprite = scene => {\n  const clickable = new ClickableSprite(getSpriteMaterialSet());\n  alignSprite(scene, clickable, 10);\n};\n\nconst testSelectableSprite = scene => {\n  const selectable = new CheckBoxSprite(getSpriteMaterialSet());\n  alignSprite(scene, selectable, 20);\n};\n\nconst alignSprite = (scene, sprite, x) => {\n  sprite.position.set(x, 20, 0);\n  const scale = 8.0;\n  sprite.scale.set(scale, scale, scale);\n  scene.add(sprite);\n};\n\nconst testRadio = scene => {\n  const geometry = new three_module/* BoxBufferGeometry */.nvb(6, 6, 6);\n\n  const initButton = (x, buttonValue) => {\n    const button = new RadioButtonMesh({\n      geo: geometry,\n      material: getMaterialSet()\n    });\n    button.position.set(x, -10, 0);\n    button.model.value = buttonValue;\n    scene.add(button);\n    return button;\n  };\n\n  const manager = new RadioButtonManager();\n  manager.addButton(initButton(-10, "button01"), initButton(0, Math.PI), initButton(10, {\n    value01: 1,\n    value02: 2\n  }));\n  manager.addButton(initButton(20, undefined));\n  manager.addEventListener(ThreeMouseEventType.SELECT, e => {\n    console.log(e.model.value);\n  });\n};\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\n\n\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var I=1/0;for(t=0;t<deferred.length;t++){for(var[B,F,U]=deferred[t],C=!0,g=0;g<B.length;g++)(!1&U||I>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[g])))?B.splice(g--,1):(C=!1,U<I&&(I=U));if(C){deferred.splice(t--,1);var s=F();void 0!==s&&(Q=s)}}return Q}U=U||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>U;t--)deferred[t]=deferred[t-1];deferred[t]=[B,F,U]},__webpack_require__.n=Q=>{var B=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(B,{a:B}),B},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),(()=>{var Q={626:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,I,[C,g,s]=F,t=0;if(C.some((B=>0!==Q[B]))){for(U in g)__webpack_require__.o(g,U)&&(__webpack_require__.m[U]=g[U]);if(s)var e=s(__webpack_require__)}for(B&&B(F);t<C.length;t++)I=C[t],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(e)},F=self.webpackChunk_masatomakino_threejs_interactive_object=self.webpackChunk_masatomakino_threejs_interactive_object||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(22)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();